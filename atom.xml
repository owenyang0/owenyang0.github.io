<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>修远</title>
  <icon>https://www.gravatar.com/avatar/7ab2fad603ec6fd08ad42abb8e7e3e18</icon>
  <subtitle>其修远兮之路漫漫，吾将求索于墙外之巅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://owenyang0.github.io/"/>
  <updated>2024-02-02T04:46:03.896Z</updated>
  <id>https://owenyang0.github.io/</id>
  
  <author>
    <name>Owen Yang</name>
    <email>usay@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工具 | 高性能Zed编辑器开源，响应速度超快、干掉VS Code？</title>
    <link href="https://owenyang0.github.io/2024/01/31/high-performace-editor-zed-in-rust/"/>
    <id>https://owenyang0.github.io/2024/01/31/high-performace-editor-zed-in-rust/</id>
    <published>2024-01-31T17:04:42.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>Zed 是一款支持多人协作的代码编辑器，底层采用 Rust，且默认支持 <code>Rust</code>，还自带了 rust-analyzer，主打“高性能”。1 月 24 日，备受关注的 <code>Zed</code> 项目宣布正式开源。</p><blockquote><p>我们很激动地宣布Zed现在是一个开源项目了。Zed本身的代码以通用授权许可证的形式提供，以确保任何改进都会造福整个社区（编辑器使用GPL，服务器端组件使用AGPL）。GPUI是Zed所使用的UI框架，它以Apache 2许可证分发，这样你可以使用它来构建高性能的桌面应用程序，并可以根据你选择的任何许可证进行分发。</p></blockquote><p><img src="https://static.owenyang.top/blogs/20240131171458.png" alt=""></p><p>Zed 代码库将采用 Copyleft 许可证，其中编辑器部分使用 GNU General Public License (GPL)，服务器端组件则采用 Affero General Public License (AGPL)。<br>此外，GPUI UI 框架将以 Apache 2 许可证分发，允许开发者构建高性能桌面应用程序，并自由选择许可证分发其应用。此次开源转变意味着 Zed 的代码和相关组件将面向所有开发者开放，赋予社区更大的灵活性和合作空间。</p><p>Zed团队还开发了一个名为<code>GPUI</code>的GPU加速UI框架。该框架遵循Apache 2许可证，旨在克服基于Web的Electron框架的限制，并利用GPU加速为用户提供更流畅和响应更快的界面。</p><p>谈到 Nathan Sobo ，他不仅仅是Zed的创始人，还是Electron框架和广受欢迎的Atom编辑器的开发者。Electron是一基于Chromium浏览器组件和V8 JavaScript引擎的框架，现已成为全球领先的轻量级IDE和编辑器——Visual Studio Code (VS Code)的一部分。然而，Zed在技术实现上走了一条与Electron完全不同的路线。</p><p><strong>Zed是用Rust语言构建的，直接编译为本机代码</strong>，这种方法与基于Web技术的Electron形成了鲜明对比。</p><p><strong>其主要特性：</strong></p><h2 id="01-让你保持专注"><a href="#01-让你保持专注" class="headerlink" title="01 让你保持专注"></a>01 让你保持专注</h2><p>高效编码始于一种不打扰你的工具。Zed将IDE的强大功能与轻量级编辑器的响应能力相结合，让你能够亲身感受到它为你带来的高效生产力。</p><h3 id="为了提高性能而开发的"><a href="#为了提高性能而开发的" class="headerlink" title="为了提高性能而开发的"></a>为了提高性能而开发的</h3><p>Zed高效地利用每个CPU核心和你的GPU，可以立即启动，瞬间加载文件，并在下一次显示刷新时响应你的按键。无与伦比的性能使你保持流畅，并使其他工具感觉很慢。</p><p><strong>交互延迟</strong><br><img src="https://static.owenyang.top/blogs/20240131172722.png" alt="交互延迟"></p><p><strong>启动时间</strong><br><img src="https://static.owenyang.top/blogs/20240131172942.png" alt=""></p><h3 id="一键智能编码"><a href="#一键智能编码" class="headerlink" title="一键智能编码"></a>一键智能编码</h3><p>通过人工智能生成代码，节省时间和按键次数。Zed原生支持GitHub Copilot，您可以使用GPT-4按下ctrl-enter并键入自然语言提示来生成或重构代码。在内置的助手面板中以对话方式与模型交互，无需切换上下文，然后在内联生成过程中引用您的对话。</p><h3 id="Language-aware"><a href="#Language-aware" class="headerlink" title="Language-aware"></a>Language-aware</h3><p>“Language-aware”是指Zed在您输入时针对每个缓冲区都保持一个完整的语法树，以实现精确的代码高亮、自动缩进、可搜索的大纲视图和结构选择。Zed还使用语言服务器协议（Language Server Protocol）来提供自动完成、代码导航、诊断和重构功能。</p><h2 id="协作（与您的团队保持连接）"><a href="#协作（与您的团队保持连接）" class="headerlink" title="协作（与您的团队保持连接）"></a>协作（与您的团队保持连接）</h2><p>通过Zed，多个开发者可以在共享的工作空间中导航和编辑。这使得可以轻松地对代码库中的任何部分进行细致、实时的对话，无论所讨论的代码是去年提交的还是尚未保存到磁盘。</p><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><h3 id="像游戏一样构建"><a href="#像游戏一样构建" class="headerlink" title="像游戏一样构建"></a>像游戏一样构建</h3><p>Zed的突破性性能始于我们的GPUI框架，这是一种构建2D用户界面的新方法。GPUI在GPU上对整个窗口进行光栅化处理，就像处理3D视频游戏一样。结果呢？每一帧都能毫无延迟、可靠且顺畅地传输像素。</p><p>其他特性可在官网查看 <a href="https://zed.dev/">https://zed.dev/</a></p><blockquote><p><strong>总得来说，Zed就是快！</strong>，2024值得一试！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Zed 是一款支持多人协作的代码编辑器，底层采用 Rust，且默认支持 &lt;code&gt;Rust&lt;/code&gt;，还自带了 rust-analyzer，主打“高性能”。1 月 24 日，备受关注的 &lt;code&gt;Zed&lt;/code&gt; 项目宣布正式开源。&lt;/p&gt;
&lt;blockquot
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技巧 | 03 JavaScript 中将 ArrayBuffer 转换为字符串</title>
    <link href="https://owenyang0.github.io/2023/04/01/%E6%8A%80%E5%B7%A7-03-JavaScript-%E4%B8%AD%E5%B0%86-ArrayBuffer-%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://owenyang0.github.io/2023/04/01/技巧-03-JavaScript-中将-ArrayBuffer-转换为字符串/</id>
    <published>2023-04-01T16:38:30.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在 JavaScript 中将 ArrayBuffer 转换为字符串，可以使用 TextDecoder API。TextDecoder 可从字节序列中解码文本内容，支持多种编码格式。</p></blockquote><p>以下是将 ArrayBuffer 转换为字符串的示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 ArrayBuffer 对象为 buffer</span></span><br><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> text = decoder.<span class="title function_">decode</span>(buffer);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们创建了一个 TextDecoder 对象，使用 <code>utf-8</code> 编码对 <code>ArrayBuffer</code> 进行解码，并将解码后的文本存储在变量 text 中。</p><p>如果 ArrayBuffer 中存储的是 <code>GB2312</code> 编码的文本，可以将 <code>utf-8</code> 编码修改为 <code>gb2312</code>。</p><p>您还可以封装为函数，以便于使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrayBufferToString</span>(<span class="params">buffer, encoding = <span class="string">&#x27;utf-8&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>(encoding);</span><br><span class="line">  <span class="keyword">return</span> decoder.<span class="title function_">decode</span>(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数接收两个参数，第一个参数表示要转换的 ArrayBuffer 对象，第二个参数为编码格式（默认为’utf-8’）。 返回转换后的字符串。调用该函数的方式如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> intArray = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer);</span><br><span class="line">intArray[<span class="number">0</span>] = <span class="number">72</span>;</span><br><span class="line">intArray[<span class="number">1</span>] = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="title function_">arrayBufferToString</span>(buffer);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// Output: Hi</span></span><br></pre></td></tr></table></figure><h2 id="01-实际问题-网页乱码"><a href="#01-实际问题-网页乱码" class="headerlink" title="01 实际问题 - 网页乱码"></a>01 实际问题 - 网页乱码</h2><p><code>nodejs</code> 使用 <code>axios</code> 写爬虫时 <code>Response</code> 乱码，经查查发现网页编码是 <code>gb2312</code>的。则我们可以通过返回 <code>arraybuffer</code> 的方式，再重新编码即可。</p><p><img style="max-height:400px;" alt="乱码" src="https://static.owenyang.top/blogs/%E4%B9%B1%E7%A0%81.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://xxx.y.z&#x27;</span>, &#123; <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> normalStrig = <span class="title function_">arrayBufferToString</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(data), <span class="string">&#x27;gb2312&#x27;</span>); <span class="comment">// 返回正确的字符串</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="02-技术细节-ArrayBuffer、Int32Array等"><a href="#02-技术细节-ArrayBuffer、Int32Array等" class="headerlink" title="02 技术细节 - ArrayBuffer、Int32Array等"></a>02 技术细节 - ArrayBuffer、Int32Array等</h3><blockquote><p><code>ArrayBuffer</code> 是一种用于在 JavaScript 中存储二进制数据的对象，可以看做是一个固定大小的字节缓冲区。可以使用 ArrayBuffer 来存储任意类型的二进制数据，包括数字、图像、音频等等。</p></blockquote><blockquote><p><code>Int32Array</code> 是一种类型化数组（TypedArray），它只能存储 <code>32 位</code>整数类型的数据。具体来说，Int32Array 可以存储范围在 <code>-2147483648 ~ 2147483647</code> 之间的整数数据，也就是 JavaScript 中的 32 位有符号整数类型。</p></blockquote><p>Int32Array 中每一项都占用 4 个字节，使用 Int32Array 对象可以快速地读取和写入 ArrayBuffer 中的 32 位整数数据，适合处理大量数据的场景。</p><p>除了 Int32Array，还有一些其他的类型化数组也可以用于存储不同类型的数据，包括：</p><ul><li>Int8Array：1 个字节的有符号整数类型，范围在 -128 ~ 127 之间；</li><li>Uint8Array：1 个字节的无符号整数类型，范围在 0 ~ 255 之间；</li><li>Uint16Array：2 个字节的无符号整数类型，范围在 0 ~ 65535 之间；</li><li>Int16Array：2 个字节的有符号整数类型，范围在 -32768 ~ 32767 之间；</li><li>Uint32Array：4 个字节的无符号整数类型，范围在 0 ~ 4294967295 之间；</li><li>Float32Array：4 个字节的单精度浮点数类型；</li><li>Float64Array：8 个字节的双精度浮点数类型。</li></ul><p>以上这些类型化数组都只能存储指定类型的数据，并且每一项占用的字节数都是固定的。使用类型化数组可以轻松地读取和写入 ArrayBuffer 中指定类型的数据，提高数据读写的效率。</p><h3 id="03-技术举例"><a href="#03-技术举例" class="headerlink" title="03 技术举例"></a>03 技术举例</h3><p>Uint8Array 和 Uint32Array 都是类型化数组（TypedArray），但它们的应用场景和使用方式有所不同。</p><blockquote><p>Uint8Array 适用于存储任意的 8 位无符号整数类型的数据，每一项占用一个字节。可以通过数组下标的方式直接访问和修改其中的数据。</p></blockquote><p>以下是 Uint8Array 的一个例子，使用它来将一个字符串编码成 UTF-8 的字节数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encodeUTF8</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> codePoints = <span class="title class_">Array</span>.<span class="title function_">from</span>(str, <span class="function"><span class="params">c</span> =&gt;</span> c.<span class="title function_">codePointAt</span>(<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(codePoints.<span class="property">length</span> * <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">const</span> uint8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer);</span><br><span class="line">  <span class="keyword">let</span> offset = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; codePoints.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> codePoint = codePoints[i];</span><br><span class="line">    <span class="keyword">if</span> (codePoint &lt; <span class="number">0x80</span>) &#123;</span><br><span class="line">      uint8Array[offset++] = codePoint;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (codePoint &lt; <span class="number">0x800</span>) &#123;</span><br><span class="line">      uint8Array[offset++] = <span class="number">0xC0</span> | (codePoint &gt;&gt; <span class="number">6</span>);</span><br><span class="line">      uint8Array[offset++] = <span class="number">0x80</span> | (codePoint &amp; <span class="number">0x3F</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (codePoint &lt; <span class="number">0x10000</span>) &#123;</span><br><span class="line">      uint8Array[offset++] = <span class="number">0xE0</span> | (codePoint &gt;&gt; <span class="number">12</span>);</span><br><span class="line">      uint8Array[offset++] = <span class="number">0x80</span> | ((codePoint &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>);</span><br><span class="line">      uint8Array[offset++] = <span class="number">0x80</span> | (codePoint &amp; <span class="number">0x3F</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      uint8Array[offset++] = <span class="number">0xF0</span> | (codePoint &gt;&gt; <span class="number">18</span>);</span><br><span class="line">      uint8Array[offset++] = <span class="number">0x80</span> | ((codePoint &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>);</span><br><span class="line">      uint8Array[offset++] = <span class="number">0x80</span> | ((codePoint &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>);</span><br><span class="line">      uint8Array[offset++] = <span class="number">0x80</span> | (codePoint &amp; <span class="number">0x3F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uint8Array.<span class="title function_">subarray</span>(<span class="number">0</span>, offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello, 世界!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> byteArr = <span class="title function_">encodeUTF8</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(byteArr);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过 <code>new Uint8Array(buffer)</code> 创建了一个长度为 <code>codePoints.length * 4</code> 的 Uint8Array 对象 <code>uint8Array</code>，即总共分配了足够存储 UTF-8 字节数组的缓存空间。然后通过对字符的 Unicode 编码进行判断，将每个字符转换为对应的 UTF-8 字节序列，并存储到 <code>uint8Array</code> 中。最后通过 <code>uint8Array.subarray(0, offset)</code> 返回仅包含有效数据的 Uint8Array 视图对象。</p><blockquote><p>Uint32Array 适用于存储任意的 32 位无符号整数类型的数据，每一项占用 4 个字节。可以通过数组下标的方式直接访问和修改其中的数据。</p></blockquote><p>好的，以下是一个使用 Uint32Array 在 JavaScript 中实现求素数的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 埃拉托斯特尼(Eratosthenes)筛法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sieveOfEratosthenes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> primes = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">1</span>);</span><br><span class="line">  primes[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  primes[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(n); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (primes[i]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i * i; j &lt;= n; j += i) &#123;</span><br><span class="line">        primes[j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> primes = <span class="title function_">sieveOfEratosthenes</span>(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; primes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (primes[i]) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码演示了如何使用 Uint32Array 在 JavaScript 中实现求小于等于 n 的所有素数的过程。我们创建一个长度为 n+1 的 Uint32Array 缓冲区 <code>primes</code>，它的每个元素都初始化为 1，表示初始时假设所有数都是素数。</p><p>然后从 2 开始，我们遍历到 n 的平方根，如果某个数 i 是素数，就将大于 i 的 i 的倍数都标记为非素数（将 <code>primes[j]</code> 置为 0），最终就能够得到所有小于等于 n 的素数。</p><p>使用 Uint32Array 能够支持处理更大的整数，也能够减少内存空间的使用，提高代码执行效率。这个例子说明了 Uint32Array 可以应用于数论问题中，并且通过使用 JavaScript 的更高级语言功能可以加速计算。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在 JavaScript 中将 ArrayBuffer 转换为字符串，可以使用 TextDecoder API。TextDecoder 可从字节序列中解码文本内容，支持多种编码格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是将 ArrayB
      
    
    </summary>
    
      <category term="前端面试进阶系列教程" scheme="https://owenyang0.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="https://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="前端面试" scheme="https://owenyang0.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="前端技巧" scheme="https://owenyang0.github.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>基础 | 02 CSS3的新特性一览</title>
    <link href="https://owenyang0.github.io/2023/03/28/%E5%9F%BA%E7%A1%80-02-CSS3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%80%E8%A7%88/"/>
    <id>https://owenyang0.github.io/2023/03/28/基础-02-CSS3的新特性一览/</id>
    <published>2023-03-28T15:49:11.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p><img style="max-height:400px;" alt="CSS3的新特性一览" src="https://static.owenyang.top/blogs/background2.jpg"></p><p><strong>层叠样式表</strong>（英语：Cascading Style Sheets，缩写：<code>CSS</code>）是一种用来为结构化文档（如HTML文档或XML应用）添加样式（字体、间距和颜色等）的计算机语言，由W3C定义和维护。它能将网页的表现和结构分离，使得网页开发更加灵活、易于维护和修改。<code>CSS3</code>现在已被大部分现代浏览器支持，而下一版的<code>CSS4</code>仍在开发中。</p><h2 id="一、CSS规范的前世今生"><a href="#一、CSS规范的前世今生" class="headerlink" title="一、CSS规范的前世今生"></a>一、CSS规范的前世今生</h2><p>CSS最初由W3C于1996年提出，并于1998年发布了CSS2。随着Web的发展，CSS规范得到了不断的更新和扩展。CSS3的提出主要是为了解决CSS2中的一些问题，并引入新的功能和特性。CSS3标准分为多个模块，每个模块定义了一些新的功能和特性。</p><h2 id="二、CSS3的新特性"><a href="#二、CSS3的新特性" class="headerlink" title="二、CSS3的新特性"></a>二、CSS3的新特性</h2><h3 id="2-1-选择器"><a href="#2-1-选择器" class="headerlink" title="2.1 选择器"></a>2.1 选择器</h3><p>在CSS3中，新增了一些强大的选择器，可以更精确地选择HTML元素，使得样式表的编写更加简单和灵活</p><table><thead><tr><th>选择器</th><th>示例</th><th>示例说明</th><th>CSS版本</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选择所有class=”intro”的元素</td><td>1</td></tr><tr><td>#id</td><td>#firstname</td><td>选择所有id=”firstname”的元素</td><td>1</td></tr><tr><td>*</td><td>*</td><td>选择所有元素</td><td>2</td></tr><tr><td>element</td><td>p</td><td>选择所有<p>元素</td><td>1</td></tr><tr><td>element,element</td><td>div,p</td><td>选择所有<div>元素和<p>元素</td><td>1</td></tr><tr><td>element element</td><td>div p</td><td>选择<div>元素内的所有<p>元素</td><td>1</td></tr><tr><td>element&gt;element</td><td>div&gt;p</td><td>选择所有父级是 <div> 元素的 <p> 元素</td><td>2</td></tr><tr><td>element+element</td><td>div+p</td><td>选择所有紧跟在 <div> 元素之后的第一个 <p> 元素</td><td>2</td></tr><tr><td>[attribute]</td><td>[target]</td><td>选择所有带有target属性元素</td><td>2</td></tr><tr><td>[attribute=value]</td><td>[target=-blank]</td><td>选择所有使用target=”-blank”的元素</td><td>2</td></tr><tr><td>[attribute~=value]</td><td>[title~=flower]</td><td>选择标题属性包含单词”flower”的所有元素</td><td>2</td></tr><tr><td>[attribute¦=language]</td><td>[lang¦=en]</td><td>选择 lang 属性等于 en，或者以 en- 为开头的所有元素</td><td>2</td></tr><tr><td>:link</td><td>a:link</td><td>选择所有未访问链接</td><td>1</td></tr><tr><td>:visited</td><td>a:visited</td><td>选择所有访问过的链接</td><td>1</td></tr><tr><td>:active</td><td>a:active</td><td>选择活动链接</td><td>1</td></tr><tr><td>:hover</td><td>a:hover</td><td>选择鼠标在链接上面时</td><td>1</td></tr><tr><td>:focus</td><td>input:focus</td><td>选择具有焦点的输入元素</td><td>2</td></tr><tr><td>:first-letter</td><td>p:first-letter</td><td>选择每一个<p>元素的第一个字母</td><td>1</td></tr><tr><td>:first-line</td><td>p:first-line</td><td>选择每一个<p>元素的第一行</td><td>1</td></tr><tr><td>:first-child</td><td>p:first-child</td><td>指定只有当<p>元素是其父级的第一个子级的样式。</td><td>2</td></tr><tr><td>:before</td><td>p:before</td><td>在每个<p>元素之前插入内容</td><td>2</td></tr><tr><td>:after</td><td>p:after</td><td>在每个<p>元素之后插入内容</td><td>2</td></tr><tr><td>:lang(language)</td><td>p:lang(it)</td><td>选择一个lang属性的起始值=”it”的所有<p>元素</td><td>2</td></tr><tr><td>element1~element2</td><td>p~ul</td><td>选择p元素之后的每一个ul元素</td><td>3</td></tr><tr><td>[attribute^=value]</td><td>a[src^=”https”]</td><td>选择每一个src属性的值以”https”开头的元素</td><td>3</td></tr><tr><td>[attribute$=value]</td><td>a[src$=”.pdf”]</td><td>选择每一个src属性的值以”.pdf”结尾的元素</td><td>3</td></tr><tr><td>[attribute*=value]</td><td>a[src*=”runoob”]</td><td>选择每一个src属性的值包含子字符串”runoob”的元素</td><td>3</td></tr><tr><td>:first-of-type</td><td>p:first-of-type</td><td>选择每个p元素是其父级的第一个p元素</td><td>3</td></tr><tr><td>:last-of-type</td><td>p:last-of-type</td><td>选择每个p元素是其父级的最后一个p元素</td><td>3</td></tr><tr><td>:only-of-type</td><td>p:only-of-type</td><td>选择每个p元素是其父级的唯一p元素</td><td>3</td></tr><tr><td>:only-child</td><td>p:only-child</td><td>选择每个p元素是其父级的唯一子元素</td><td>3</td></tr><tr><td>:nth-child(n)</td><td>p:nth-child(2)</td><td>选择每个p元素是其父级的第二个子元素</td><td>3</td></tr><tr><td>:nth-last-child(n)</td><td>p:nth-last-child(2)</td><td>选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td><td>3</td></tr><tr><td>:nth-of-type(n)</td><td>p:nth-of-type(2)</td><td>选择每个p元素是其父级的第二个p元素</td><td>3</td></tr><tr><td>:nth-last-of-type(n)</td><td>p:nth-last-of-type(2)</td><td>选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td><td>3</td></tr><tr><td>:last-child</td><td>p:last-child</td><td>选择每个p元素是其父级的最后一个子级。</td><td>3</td></tr><tr><td>:root</td><td>:root</td><td>选择文档的根元素</td><td>3</td></tr><tr><td>:empty</td><td>p:empty</td><td>选择每个没有任何子级的p元素（包括文本节点）</td><td>3</td></tr><tr><td>:target</td><td>#news:target</td><td>选择当前活动的#news元素（包含该锚名称的点击的URL）</td><td>3</td></tr><tr><td>:enabled</td><td>input:enabled</td><td>选择每一个已启用的输入元素</td><td>3</td></tr><tr><td>:disabled</td><td>input:disabled</td><td>选择每一个禁用的输入元素</td><td>3</td></tr><tr><td>:checked</td><td>input:checked</td><td>选择每个选中的输入元素</td><td>3</td></tr><tr><td>:not(selector)</td><td>:not(p)</td><td>选择每个并非p元素的元素</td><td>3</td></tr><tr><td>::selection</td><td>::selection</td><td>匹配元素中被用户选中或处于高亮状态的部分</td><td>3</td></tr><tr><td>:out-of-range</td><td>:out-of-range</td><td>匹配值在指定区间之外的input元素</td><td>3</td></tr><tr><td>:in-range</td><td>:in-range</td><td>匹配值在指定区间之内的input元素</td><td>3</td></tr><tr><td>:read-write</td><td>:read-write</td><td>用于匹配可读及可写的元素</td><td>3</td></tr><tr><td>:read-only</td><td>:read-only</td><td>用于匹配设置 “readonly”（只读） 属性的元素</td><td>3</td></tr><tr><td>:optional</td><td>:optional</td><td>用于匹配可选的输入元素</td><td>3</td></tr><tr><td>:required</td><td>:required</td><td>用于匹配设置了 “required” 属性的元素</td><td>3</td></tr><tr><td>:valid</td><td>:valid</td><td>用于匹配输入值为合法的元素</td><td>3</td></tr><tr><td>:invalid</td><td>:invalid</td><td>用于匹配输入值为非法的元素</td><td>3</td></tr><tr><td>:required</td><td>:required</td><td>用于匹配设置了 “required” 属性的元素</td><td>3</td></tr><tr><td>:valid</td><td>:valid</td><td>用于匹配输入值为合法的元素</td><td>3</td></tr><tr><td>:invalid</td><td>:invalid</td><td>用于匹配输入值为非法的元素</td><td>3</td></tr></tbody></table><h3 id="2-2-布局和定位"><a href="#2-2-布局和定位" class="headerlink" title="2.2 布局和定位"></a>2.2 布局和定位</h3><p>CSS3新增了一些布局和定位的特性，如弹性布局（flexbox）、网格布局（grid）、多列布局（multicolumn）等，这些特性可以更好地控制页面布局和元素定位。</p><p><strong>弹性布局（flexbox）</strong> 是一种强大的布局模型，可以使元素在容器中按照自适应、灵活的方式排列，适应不同的屏幕尺寸和设备方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>网格布局（grid）</strong> 是一种二维网格布局模型，可以将页面分成行和列，并将元素放置在网格单元格中，实现复杂的布局效果。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>多列布局</strong> CSS3允许我们通过column-count属性，将HTML元素分为多列布局，从而实现更加美观、自然的版面效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">column-count</span>: <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-动画和过渡"><a href="#2-3-动画和过渡" class="headerlink" title="2.3 动画和过渡"></a>2.3 动画和过渡</h3><p>CSS3还引入了一些动画和过渡的特性，如动画（@keyframes）、过渡（transition）等，可以实现更加复杂、流畅的页面效果。</p><p><strong>动画（@keyframes）</strong>是一种定义动画的方法，可以定义动画的起点、终点和中间状态，并可以对动画进行控制和设置。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.spinner</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">1s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> blink &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cursor</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: blink <span class="number">1s</span> infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>animation属性说明</strong></p><blockquote><p><code>animation-name</code>：动画名称<br><code>animation-duration</code>：动画持续时间<br><code>animation-timing-function</code>：动画时间函数<br><code>animation-delay</code>：动画延迟时间<br><code>animation-iteration-count</code>：动画执行次数，可以设置为一个整数，也可以设置为infinite，意思是无限循环<br><code>animation-direction</code>：动画执行方向<br><code>animation-paly-state</code>：动画播放状态<br><code>animation-fill-mode</code>：动画填充模式</p></blockquote><p><strong>过渡（transition）</strong>是一种定义元素过渡效果的方法，可以实现元素属性的平滑过渡和变化。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-4-媒体查询"><a href="#2-4-媒体查询" class="headerlink" title="2.4 媒体查询"></a>2.4 媒体查询</h3><p><strong>媒体查询（Media Queries）</strong>可以根据设备的特性、屏幕大小、分辨率等信息，为网页应用不同的CSS样式。这使得我们可以通过一份HTML代码，为不同的设备提供不同的界面效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 600px及以下屏幕大小下的CSS样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2D-3D转换"><a href="#2-5-2D-3D转换" class="headerlink" title="2.5 2D/3D转换"></a>2.5 2D/3D转换</h3><p>CSS3允许我们通过 <code>transform</code> 属性，对HTML元素进行旋转、缩放、平移等变换操作，从而实现更加生动、立体的界面效果。<br><code>transform-origin</code> 转换元素的位置（围绕那个点进行转换），默认的转换原点是<code>center</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">120px</span>, <span class="number">50%</span>); // 位移</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>, <span class="number">0.5</span>); // 缩放</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0.5turn</span>); // 旋转</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>, <span class="number">20deg</span>); // 倾斜</span><br></pre></td></tr></table></figure><h3 id="2-6-样式"><a href="#2-6-样式" class="headerlink" title="2.6 样式"></a>2.6 样式</h3><p><strong>1) 边框圆角</strong><br>CSS3允许我们通过border-radius属性，为HTML元素的边框设置圆角效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure><blockquote><p>border-radius：创建圆角边框<br>box-shadow：为元素添加阴影<br>border-image：使用图片来绘制边框</p></blockquote><p><strong>2) 阴影效果</strong><br>CSS3允许我们通过box-shadow属性，为HTML元素添加阴影效果，从而实现更加立体、生动的界面效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">#888</span>;</span><br></pre></td></tr></table></figure><p><strong>3) 背景</strong><br>新增了几个关于背景的属性，分别是 <code>background-clip</code>、<code>background-origin</code>、<code>background-size</code> 和 <code>background-break</code></p><p><strong>4) 渐变效果</strong><br>CSS3允许我们通过linear-gradient或radial-gradient函数，为HTML元素设置渐变效果，从而实现更加丰富、柔和的界面效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#FFFFFF</span>, <span class="number">#000000</span>);</span><br></pre></td></tr></table></figure><p><strong>5) 文字、颜色等</strong><br><strong>文字</strong><br><code>word-wrap</code> word-wrap: normal|break-word</p><p><code>text-overflow</code> 设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择：</p><ul><li>clip：修剪文本 | ellipsis：显示省略符号来代表被修剪的文本</li></ul><p><code>text-shadow</code> text-shadow可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色</p><p><code>text-decoration</code> CSS3里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置：</p><ul><li>text-fill-color: 设置文字内部填充颜色</li><li>text-stroke-color: 设置文字边界填充颜色</li><li>text-stroke-width: 设置文字边界宽度</li></ul><p><strong>颜色</strong><br>css3新增了新的颜色表示方式rgba与hsla<br><code>rgba</code> 分为两部分，rgb为颜色值，a为透明度<br><code>hala</code> 分为四部分，h为色相，s为饱和度，l为亮度，a为透明度</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上就是CSS3的一些新特性，这些新特性可以使我们更加轻松、高效地实现各种丰富、生动、美观的界面效果。</p><blockquote><p><a href="/2023/03/26/前端技术全方位深度进阶指南/">《前端技术全方位深度进阶指南》系列教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img style=&quot;max-height:400px;&quot; alt=&quot;CSS3的新特性一览&quot; src=&quot;https://static.owenyang.top/blogs/background2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;层叠样式表&lt;/strong&gt;（英语
      
    
    </summary>
    
      <category term="前端面试进阶系列教程" scheme="https://owenyang0.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="CSS" scheme="https://owenyang0.github.io/tags/CSS/"/>
    
      <category term="前端进阶" scheme="https://owenyang0.github.io/tags/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
      <category term="前端面试" scheme="https://owenyang0.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基础 | 01 HTML5的新特性与案例演示</title>
    <link href="https://owenyang0.github.io/2023/03/26/%E5%9F%BA%E7%A1%80-01-HTML5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%8E%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA/"/>
    <id>https://owenyang0.github.io/2023/03/26/基础-01-HTML5的新特性与案例演示/</id>
    <published>2023-03-26T17:11:24.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p><img style="max-height:400px;" alt="HTML5的新特性与案例演示" src="https://static.owenyang.top/blogs/background1.jpg"></p><p>超文本标记语言（英语：HyperTextMarkupLanguage，简称：HTML）是一种用于创建网页的标准标记语言。HTML是一种基础技术，常与CSS、JavaScript一起被众多网站用于设计网页、网页应用程序以及移动应用程序的用户界面。网页浏览器可以读取HTML文件，并将其渲染成可视化网页。HTML描述了一个网站的结构语义随着线索的呈现，使之成为一种标记语言而非编程语言。</p><h2 id="一、HTML规范的前世今生"><a href="#一、HTML规范的前世今生" class="headerlink" title="一、HTML规范的前世今生"></a>一、HTML规范的前世今生</h2><p>HTML标准 最初是由CERN（欧洲核子研究组织）的Tim Berners-Lee提出的。最初的HTML规范相对简单，只有少量标记可以用来定义文本的结构和格式。<br>随着Web的普及和互联网的发展，HTML规范逐渐得到了扩展和更新，新版本的规范不仅增加了更多的标记和属性，还引入了新的功能和特性，如表单控件、多媒体支持、动态效果等等。这些特性的引入和改进，推动了互联网的进一步发展和创新。</p><p>HTML5是HTML最新的修订版本：</p><ul><li>2008年1月 HTML5 由W3C作为工作草案发布</li><li>2014年10月28日，HTML5作为稳定W3C推荐标准发布 ，这意味着HTML5的标准化已经完成</li></ul><h2 id="二、HTML5的新特性"><a href="#二、HTML5的新特性" class="headerlink" title="二、HTML5的新特性"></a>二、HTML5的新特性</h2><p>HTML5是Web标准的最新版本，它引入了许多新的特性和改进，旨在为Web开发者提供更强大的工具和更好的用户体验。<br>下面是HTML5的一些新特性：</p><h3 id="2-1-语义化标签与属性"><a href="#2-1-语义化标签与属性" class="headerlink" title="2.1 语义化标签与属性"></a>2.1 语义化标签与属性</h3><p>新的语义化标签：HTML5引入了许多新的标签，如<code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;section&gt;</code>等，这些标签有助于开发者更好地描述页面内容，提高页面的可读性和可维护性。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是页面的头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>菜单1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>菜单2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>菜单3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是一个章节<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是章节的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是页面的底部<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-2-表单控件增强"><a href="#2-2-表单控件增强" class="headerlink" title="2.2 表单控件增强"></a>2.2 表单控件增强</h3><p>表单控件增强：HTML5新增了一些表单控件，如 <code>&lt;input type=&quot;date&quot;&gt;</code>、<code>&lt;input type=&quot;color&quot;&gt;</code>、<code>&lt;input type=&quot;range&quot;&gt;</code> 等，同时也提供了一些新的属性，如<code>placeholder</code>、<code>required</code>、<code>pattern</code>等，这些都有助于提升用户交互体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新的表单控件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>日期：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>颜色：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>滑动条：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;range&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-媒体支持"><a href="#2-3-媒体支持" class="headerlink" title="2.3 媒体支持"></a>2.3 媒体支持</h3><p>媒体支持：HTML5支持多媒体的播放和操作，包括音频、视频等，同时还提供了一些新的API，如<code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>等，这些API提供了丰富的操作接口，可以实现各种复杂的媒体应用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持Video标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持 audio 元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>&lt;video&gt;</code> 元素支持三种视频格式: MP4, WebM, 和 Ogg。<br><code>&lt;audio&gt;</code> 元素支持三种音频格式: MP3, Wav, 和 Ogg。</p></blockquote><h3 id="2-4-Web-Storage"><a href="#2-4-Web-Storage" class="headerlink" title="2.4 Web Storage"></a>2.4 Web Storage</h3><p>Web Storage：HTML5引入了Web Storage API，包括 localStorage 和 sessionStorage 两种存储方式，这些存储方式可以用来存储客户端数据，避免了传统的cookie机制的一些缺陷。</p><ul><li>localStorage - 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</li><li>sessionStorage - 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</li></ul><h3 id="2-5-Web-Workers"><a href="#2-5-Web-Workers" class="headerlink" title="2.5 Web Workers"></a>2.5 Web Workers</h3><p>Web Workers API 是 HTML5 的一个新特性，它可以在后台线程中运行 JavaScript 脚本，而不影响页面的主线程，从而提高了前端的性能和用户体验。在此基础上，我们可以实现一些比较复杂的功能，比如图像处理、音视频处理等。<br>以下是一个基于 Web Workers 的示例，用于计算斐波那契数列：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web Workers Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建一个 worker 线程</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听 worker 线程的消息</span></span></span><br><span class="line"><span class="language-javascript">      worker.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> result = event.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`计算结果是：<span class="subst">$&#123;result&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 向 worker 线程发送消息</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> n = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`开始计算斐波那契数列的第 <span class="subst">$&#123;n&#125;</span> 项`</span>);</span></span><br><span class="line"><span class="language-javascript">      worker.<span class="title function_">postMessage</span>(n);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web Workers Demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>打开浏览器控制台查看计算结果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>上面的代码中，我们首先创建了一个 <code>worker</code> 线程，并指定它的脚本文件为 <code>worker.js</code>。然后通过监听 worker.onmessage 事件，获取 worker 线程发送的计算结果。最后通过调用 worker.postMessage 方法向 worker 线程发送消息，以触发斐波那契数列的计算。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收主线程发送的消息，并进行计算</span></span><br><span class="line">onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> n = event.<span class="property">data</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">fibonacci</span>(n);</span><br><span class="line">  <span class="title function_">postMessage</span>(result);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算斐波那契数列的第 n 项</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>worker.js 文件中，我们首先通过监听 onmessage 事件接收主线程发送的消息，然后进行斐波那契数列的计算，最后通过调用 postMessage 方法将计算结果发送回主线程。</p><h3 id="2-6-Canvas和SVG"><a href="#2-6-Canvas和SVG" class="headerlink" title="2.6 Canvas和SVG"></a>2.6 Canvas和SVG</h3><p>Canvas和SVG：HTML5引入了<code>&lt;canvas&gt;</code>和<code>&lt;svg&gt;</code>两种绘图标记，使得Web开发者可以在网页上绘制图形和动画。<br>使用 arc() 方法 绘制一个圆:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx=c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">95</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure></p><h3 id="2-7-WebSocket"><a href="#2-7-WebSocket" class="headerlink" title="2.7 WebSocket"></a>2.7 WebSocket</h3><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。它使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。<br>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。使得Web应用可以进行实时通信，如在线聊天等。</p><h3 id="2-8-Geolocation（地理位置）"><a href="#2-8-Geolocation（地理位置）" class="headerlink" title="2.8 Geolocation（地理位置）"></a>2.8 Geolocation（地理位置）</h3><p>HTML5 Geolocation API 用于获得用户的地理位置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">geolocation</span> &#123;</span><br><span class="line">    <span class="attr">getCurrentPosition</span>:  fn   用于获取当前的位置数据</span><br><span class="line">    <span class="attr">watchPosition</span>: fn  监视用户位置的改变</span><br><span class="line">    <span class="attr">clearWatch</span>: fn   清除定位监视</span><br><span class="line">&#125;　</span><br><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">pos</span>)&#123;</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户定位数据获取成功&#x27;</span>)</span><br><span class="line">　　　　<span class="comment">//console.log(arguments);</span></span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定位时间：&#x27;</span>,pos.<span class="property">timestamp</span>)</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;经度：&#x27;</span>,pos.<span class="property">coords</span>.<span class="property">longitude</span>)</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;纬度：&#x27;</span>,pos.<span class="property">coords</span>.<span class="property">latitude</span>)</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;海拔：&#x27;</span>,pos.<span class="property">coords</span>.<span class="property">altitude</span>)</span><br><span class="line">　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;速度：&#x27;</span>,pos.<span class="property">coords</span>.<span class="property">speed</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>鉴于该特性可能侵犯用户的隐私，除非用户同意，否则用户位置信息是不可用的。</p><h3 id="2-9-Drag-amp-Drop（拖放）"><a href="#2-9-Drag-amp-Drop（拖放）" class="headerlink" title="2.9 Drag &amp; Drop（拖放）"></a>2.9 Drag &amp; Drop（拖放）</h3><p>拖放（Drag 和 drop）是 HTML5 标准的组成部分。拖放是一种常见的特性，即抓取对象以后拖到另一个位置。在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。<br>为了使元素可拖动，把 draggable 属性设置为 true<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params">ev</span>) &#123;</span><br><span class="line">    ev.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;Text&quot;</span>,ev.<span class="property">target</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onDragover</span>(<span class="params">ev</span>) &#123;</span><br><span class="line">    ev.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">ev</span>) &#123;</span><br><span class="line">    ev.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">var</span> data=ev.<span class="property">dataTransfer</span>.<span class="title function_">getData</span>(<span class="string">&quot;Text&quot;</span>);</span><br><span class="line">    ev.<span class="property">target</span>.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）<br>通过 dataTransfer.getData(“Text”) 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。</p></blockquote><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>HTML5的新特性使得前端开发变得更加灵活和便捷，应用场景非常广泛。其中，语义化标签可以使得页面更加清晰易懂，提高可读性和可维护性；表单控件增强和媒体支持可以提升用户交互体验，让用户获得更好的使用体验；Web Storage可以用来存储客户端数据，解决传统cookie机制的一些缺陷；Web Workers可以提升JavaScript脚本的执行效率，提高网站性能等。</p><blockquote><p><a href="/2023/03/26/前端技术全方位深度进阶指南/">《前端技术全方位深度进阶指南》系列教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img style=&quot;max-height:400px;&quot; alt=&quot;HTML5的新特性与案例演示&quot; src=&quot;https://static.owenyang.top/blogs/background1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;超文本标记语言（英语：HyperTextM
      
    
    </summary>
    
      <category term="前端面试进阶系列教程" scheme="https://owenyang0.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="前端进阶" scheme="https://owenyang0.github.io/tags/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
      <category term="前端面试" scheme="https://owenyang0.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="HTML5" scheme="https://owenyang0.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>前端技术全方位深度进阶指南</title>
    <link href="https://owenyang0.github.io/2023/03/26/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%85%A8%E6%96%B9%E4%BD%8D%E6%B7%B1%E5%BA%A6%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"/>
    <id>https://owenyang0.github.io/2023/03/26/前端技术全方位深度进阶指南/</id>
    <published>2023-03-26T16:50:03.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p><img style="max-height:400px;" alt="前端技术全方位深度进阶指南" src="https://static.owenyang.top/blogs/background0.jpg"></p><h2 id="0-引子"><a href="#0-引子" class="headerlink" title="0 引子"></a>0 引子</h2><p>作为前端开发人员，我们时刻都需要学习新知识，不断提升自己的技能水平。但是，在这个日新月异的行业中，要跟上最新的技术和最佳实践变得越来越困难。</p><p>因此，我们需要一份全面而深入的指南，来帮助我们更好地了解前端技术的全貌，并指导我们如何逐个深入学习各个领域的知识点。</p><p>本系列 <strong>《前端技术全方位深度进阶指南》</strong> 便是这样一份指南。</p><p>它将从基础的 <code>HTML/CSS/JavaScript</code>，到前端流程规范、工程化实践、性能优化和调试技术、跨端开发等方面进行深入讲解 <strong>（不保证顺序）</strong>。同时，还将涉及到常用的前端框架、设计模式、数据结构与算法等方面的知识点，为读者打造一个全面、系统的前端技能树。</p><p>无论你是前端初学者，还是有多年经验的专业人士，本系列都能够满足你的需求。希望通过本《指南》，你能够掌握更多实用的前端知识，成为一名更加出色的前端开发人员。</p><p>在接下来的章节中，我们将逐个深入讲解各个领域的知识点，并提供实践案例和建议。无论你的目标是成为一名全栈开发人员、跨端开发专家、还是前端架构师，本 <strong>《指南》</strong> 都将为你提供宝贵的参考和指导。</p><h2 id="1-大纲"><a href="#1-大纲" class="headerlink" title="1 大纲"></a>1 大纲</h2><p>大纲持续迭代中</p><h3 id="1-1-前端基础-HTML-CSS-JavaScript"><a href="#1-1-前端基础-HTML-CSS-JavaScript" class="headerlink" title="1.1 前端基础 HTML/CSS/JavaScript"></a>1.1 前端基础 HTML/CSS/JavaScript</h3><ul><li>HTML 基础知识 <a href="/2023/03/26/基础-01-HTML5的新特性与案例演示/">基础 | 01 HTML5的新特性与案例演示</a></li><li>CSS 基础知识 <a href="/2023/03/28/基础-02-CSS3的新特性一览/">基础 | 02 CSS3的新特性一览</a></li><li>JavaScript 基础知识</li><li>浏览器基础知识</li><li>DOM 操作</li><li>BOM 操作</li><li>事件机制</li><li>Ajax 与数据交互</li></ul><h3 id="1-2-前端框架"><a href="#1-2-前端框架" class="headerlink" title="1.2 前端框架"></a>1.2 前端框架</h3><ul><li>React</li><li>Vue</li><li>Angular、Svelte…</li></ul><h3 id="1-3前端设计模式"><a href="#1-3前端设计模式" class="headerlink" title="1.3前端设计模式"></a>1.3前端设计模式</h3><ul><li>MVC 设计模式</li><li>MVP 设计模式</li><li>MVVM 设计模式</li><li>单例模式</li><li>工厂模式</li><li>观察者模式</li><li>发布订阅模式</li></ul><h3 id="1-4-前端流程规范"><a href="#1-4-前端流程规范" class="headerlink" title="1.4 前端流程规范"></a>1.4 前端流程规范</h3><ul><li>代码规范</li><li>Git 工作流</li><li>项目开发流程</li><li>团队协作规范</li></ul><h3 id="1-5前端工程化实践"><a href="#1-5前端工程化实践" class="headerlink" title="1.5前端工程化实践"></a>1.5前端工程化实践</h3><ul><li>Webpack 配置</li><li>模块化开发</li><li>代码分离与懒加载</li><li>前端自动化测试</li><li>代码打包与压缩</li></ul><h3 id="1-6-前端性能优化和调试技术"><a href="#1-6-前端性能优化和调试技术" class="headerlink" title="1.6 前端性能优化和调试技术"></a>1.6 前端性能优化和调试技术</h3><ul><li>网络优化</li><li>页面性能优化</li><li>JS 性能优化</li><li>前端调试技巧</li><li>性能监控与分析</li></ul><h3 id="1-7-前端安全"><a href="#1-7-前端安全" class="headerlink" title="1.7 前端安全"></a>1.7 前端安全</h3><ul><li>XSS 攻击与防御</li><li>CSRF 攻击与防御</li><li>SQL 注入攻击与防御</li><li>点击劫持攻击与防御</li></ul><h3 id="1-8-数据结构和算法"><a href="#1-8-数据结构和算法" class="headerlink" title="1.8 数据结构和算法"></a>1.8 数据结构和算法</h3><ul><li>数组和链表</li><li>栈和队列</li><li>哈希表</li><li>二叉树</li><li>图论</li><li>排序和查找算法</li><li>动态规划和贪心算法</li></ul><h3 id="1-9-跨端开发"><a href="#1-9-跨端开发" class="headerlink" title="1.9 跨端开发"></a>1.9 跨端开发</h3><ul><li>React Native</li><li>小程序开发</li><li>Electron 应用开发</li></ul><h3 id="1-10-前端进阶指南"><a href="#1-10-前端进阶指南" class="headerlink" title="1.10 前端进阶指南"></a>1.10 前端进阶指南</h3><ul><li>前端高级技术深度学习</li><li>如何深入理解 Web 标准</li><li>前端未来技术趋势探索</li><li>如何构建高质量的前端应用</li></ul><h2 id="2-关于作者"><a href="#2-关于作者" class="headerlink" title="2 关于作者"></a>2 关于作者</h2><p>OwenYang也叫木易某某，一名互联网从业者，对前端架构的演进和生态发展有着浓厚的兴趣。</p><p>他致力于实践优秀的代码架构，喜欢探索前端技术的深度和广度，以期在这个日新月异的领域中不断进步和创新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img style=&quot;max-height:400px;&quot; alt=&quot;前端技术全方位深度进阶指南&quot; src=&quot;https://static.owenyang.top/blogs/background0.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;0-引子&quot;&gt;&lt;a href=&quot;#0
      
    
    </summary>
    
      <category term="前端面试进阶系列教程" scheme="https://owenyang0.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="前端进阶" scheme="https://owenyang0.github.io/tags/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
      <category term="前端面试" scheme="https://owenyang0.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>木易跟打器[2]-打字练习mac客户端与网页版</title>
    <link href="https://owenyang0.github.io/2023/01/29/%E6%9C%A8%E6%98%93%E8%B7%9F%E6%89%93%E5%99%A8-2-%E6%89%93%E5%AD%97%E7%BB%83%E4%B9%A0mac%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E7%BD%91%E9%A1%B5%E7%89%88/"/>
    <id>https://owenyang0.github.io/2023/01/29/木易跟打器-2-打字练习mac客户端与网页版/</id>
    <published>2023-01-29T11:36:16.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、木易跟打器"><a href="#一、木易跟打器" class="headerlink" title="一、木易跟打器"></a>一、木易跟打器</h2><p><strong>木易跟打器</strong>也叫 <code>mac跟打器</code> 或 <code>qq跟打器</code>，是由木易打造的当前macOS平台<strong>唯一的</strong>、可<strong>直接载文</strong>的跟打器。可通过macQQ直接群载文，计算跟打指标最终发送成绩至QQ群里，具有发文<code>复合指标</code>、历史数据<code>可视化</code>、轻便、准确、快捷等特点。</p><p>如未下载<code>mac客户端</code>也可直接通过网页访问进行本地练习，支持<code>击键</code>、<code>键准</code>等复合指标；根据字频提供前3500的单字练习文本，也可直接自定义练习文本，让打字练习如虎添翼。</p><blockquote><p>该工具是在笔者学习虎码(性能最优的形码)的过程中，开发并完善的。并为其提供了虎码学习者的专用练习文本</p></blockquote><h2 id="二、下载访问地址"><a href="#二、下载访问地址" class="headerlink" title="二、下载访问地址"></a>二、下载访问地址</h2><h3 id="2-1-网页练习"><a href="#2-1-网页练习" class="headerlink" title="2.1 网页练习"></a>2.1 网页练习</h3><blockquote><p>木易跟打器 - 发文 <a href="https://typer.owenyang.top/kata">https://typer.owenyang.top/kata</a></p></blockquote><h3 id="2-2-客户端下载"><a href="#2-2-客户端下载" class="headerlink" title="2.2 客户端下载"></a>2.2 客户端下载</h3><blockquote><p>1、木易跟打器 - 程序下载 <a href="https://typer.owenyang.top/download">https://typer.owenyang.top/download</a><br>2、也可直接在百度云下载<strong>木易跟打器0.3.0（提取码8888）：</strong><br><a href="https://pan.baidu.com/s/1aDbfbFx4mrM2B-ErvR-tnQ?pwd=8888">https://pan.baidu.com/s/1aDbfbFx4mrM2B-ErvR-tnQ?pwd=8888</a></p></blockquote><h3 id="2-3-功能对比"><a href="#2-3-功能对比" class="headerlink" title="2.3 功能对比"></a>2.3 功能对比</h3><table><thead><tr><th>功能</th><th>mac客户端</th><th>网页版</th></tr></thead><tbody><tr><td>直接载文(F4)</td><td>✅</td><td>❌</td></tr><tr><td>潜水模式</td><td>✅</td><td>不适用</td></tr><tr><td>赛文跟打</td><td>✅</td><td>✅</td></tr><tr><td>词库练习</td><td>✅</td><td>✅</td></tr><tr><td>发文练习(F2复合指标击键、键准 )</td><td>✅</td><td>✅</td></tr><tr><td>发文练习(常用单字字频排序)</td><td>✅</td><td>✅</td></tr><tr><td>历史记录(所有数据)</td><td>✅</td><td>✅</td></tr><tr><td>数据可视化</td><td>✅</td><td>✅</td></tr><tr><td>按键统计(热力图)</td><td>✅</td><td>✅</td></tr><tr><td>词提上传(86、091、虎码等无限制)</td><td>✅</td><td>✅</td></tr><tr><td>主题切换(暗黑模式)</td><td>✅</td><td>✅</td></tr></tbody></table><h2 id="三、功能概览"><a href="#三、功能概览" class="headerlink" title="三、功能概览"></a>三、功能概览</h2><h3 id="3-1-赛文跟打-主界面"><a href="#3-1-赛文跟打-主界面" class="headerlink" title="3.1 赛文跟打-主界面"></a>3.1 赛文跟打-主界面</h3><p><img style="max-height:400px;" alt="木易跟打器-赛文跟打" src="https://pic2.zhimg.com/v2-7cc885064ad594cfc7d2269ea90fd921_r.jpg"></p><h3 id="3-2-发文"><a href="#3-2-发文" class="headerlink" title="3.2 发文"></a>3.2 发文</h3><p>可自定义复合指标：击键、键准，通过复合指标后方可进入下一段，否则可乱序、重打、无操作。</p><p>可自定义练习文本：单字前3500字频排序，虎码练习文本，自定义文本等。</p><p><img style="max-height:400px;" alt="木易跟打器-发文" src="https://pic2.zhimg.com/v2-3c5bf390cabff3ea2e58d6d9b0728899_r.jpg"><br><img style="max-height:400px;" alt="木易跟打器-发文-练习文本" src="https://pic2.zhimg.com/v2-5466bc979b3d2185d2025e8d688f5551_r.jpg"></p><h3 id="3-3-跟打历史"><a href="#3-3-跟打历史" class="headerlink" title="3.3 跟打历史"></a>3.3 跟打历史</h3><p>历史记录全开放，数据可视化，让你体味成长的乐趣。<br><img style="max-height:400px;" alt="木易跟打器-历史记录" src="https://pic1.zhimg.com/v2-44c4f9f9ee7dbbfbd87a5ca1067b76e8_r.jpg"></p><h3 id="3-4-词提开启"><a href="#3-4-词提开启" class="headerlink" title="3.4 词提开启"></a>3.4 词提开启</h3><p><img style="max-height:400px;" alt="木易跟打器-词提开启" src="https://pic3.zhimg.com/v2-9a0e6796a6b3af5ee7d2d2f54d3302b2_r.jpg"></p><h3 id="3-5-主题切换"><a href="#3-5-主题切换" class="headerlink" title="3.5 主题切换"></a>3.5 主题切换</h3><p><img style="max-height:400px;" alt="木易跟打器-主题切换" src="https://pic2.zhimg.com/v2-cf8896f5d522ae43d9d9d822915dabdd_r.jpg"></p><h2 id="四、更多功能"><a href="#四、更多功能" class="headerlink" title="四、更多功能"></a>四、更多功能</h2><p>更多功能，等你体验发现！<br><strong>说明：</strong>由于域名<a href="https://typer.owenyang.top">https://typer.owenyang.top</a>还在备案中，访问当前域名可能会较慢，必要情况可使用科学上网。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、木易跟打器&quot;&gt;&lt;a href=&quot;#一、木易跟打器&quot; class=&quot;headerlink&quot; title=&quot;一、木易跟打器&quot;&gt;&lt;/a&gt;一、木易跟打器&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;木易跟打器&lt;/strong&gt;也叫 &lt;code&gt;mac跟打器&lt;/code&gt; 或 &lt;co
      
    
    </summary>
    
      <category term="软件工具" scheme="https://owenyang0.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="跟打器" scheme="https://owenyang0.github.io/tags/%E8%B7%9F%E6%89%93%E5%99%A8/"/>
    
      <category term="虎码练习" scheme="https://owenyang0.github.io/tags/%E8%99%8E%E7%A0%81%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>木易跟打器[1]-macOS上可直接载文的跟打器</title>
    <link href="https://owenyang0.github.io/2023/01/07/%E6%9C%A8%E6%98%93%E8%B7%9F%E6%89%93%E5%99%A8-macOS%E4%B8%8A%E5%8F%AF%E7%9B%B4%E6%8E%A5%E8%BD%BD%E6%96%87%E7%9A%84%E8%B7%9F%E6%89%93%E5%99%A8/"/>
    <id>https://owenyang0.github.io/2023/01/07/木易跟打器-macOS上可直接载文的跟打器/</id>
    <published>2023-01-07T15:01:17.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p><img style="max-height:400px;" alt="木易跟打器macOS版" src="https://typer.owenyang.top/img/logo-lanscape%402x.png"></p><p><strong>木易跟打器</strong>也叫 <code>mac跟打器</code> 或 <code>qq跟打器</code>，是由木易打造的当前macOS平台<strong>唯一的</strong>、可<strong>直接载文</strong>的跟打器。可通过macQQ直接群载文，计算跟打指标最终发送成绩至QQ群里，具有发文<code>复合指标</code>、历史数据<code>可视化</code>、轻便、准确、快捷等特点。</p><p>如未下载<code>mac客户端</code>也可直接通过网页访问进行本地练习，支持<code>击键</code>、<code>键准</code>等复合指标；根据字频提供前3500的单字练习文本，也可直接自定义练习文本，让打字练习如虎添翼。</p><blockquote><p>该工具是在笔者学习虎码(性能最优的形码)的过程中，开发并完善的。并为其提供了虎码学习者的专用练习文本</p></blockquote><blockquote><p>下载地址：<a href="https://typer.owenyang.top/download">https://typer.owenyang.top/download</a><br>版本记录：<a href="https://typer.owenyang.top/changelog">https://typer.owenyang.top/changelog</a></p></blockquote><p>本人是个五笔爱好者，也一直在使用五笔，曾经(差不多10年前了)也做过Windows平台的跟打器<a href="https://github.com/owenyang0/FollowTyperAndSender">易跟打Windows版</a>。</p><p>从 <code>Windows</code> 转到 <code>Mac</code> 之后，苦于<code>macOS</code>没有可用的跟打器，偶然看到了<a href="https://gitee.com/hotleave/quick-typing">QT</a>基于他们的代码做一个<code>macOS</code>上可直接载文用的跟打器，外理了一些macOS系统的兼容，于是便有了这个项目。</p><p><img style="max-height:400px;" alt="木易跟打器macOS版" src="https://typer.owenyang.top/img/ui%402x.png"></p><h2 id="一、快速上手"><a href="#一、快速上手" class="headerlink" title="一、快速上手"></a>一、快速上手</h2><p>因为需要载文，在<code>系统偏好设置-安全性与隐私-辅助功能</code>中，允许木易跟打器控制电脑</p><p><img width="500" alt="木易跟打器macOS版" src="https://typer.owenyang.top/img/setting.png"></p><p>同时由于QQ macOS版本的限制，无法全文获取，可通过以下方式载文</p><ul><li>鼠标移至聊天窗口对应消息位置</li><li>按<code>F4</code>载入文本</li><li>开始打字</li></ul><h2 id="二、主要功能"><a href="#二、主要功能" class="headerlink" title="二、主要功能"></a>二、主要功能</h2><ul><li style="list-style: none"><input type="checkbox" checked></input> QQ群直接载文</li><li style="list-style: none"><input type="checkbox" checked></input> 赛文跟打</li><li style="list-style: none"><input type="checkbox" checked></input> 词语提示</li><li style="list-style: none"><input type="checkbox" checked></input> 成绩发送</li></ul><h2 id="三、Contributing"><a href="#三、Contributing" class="headerlink" title="三、Contributing"></a>三、Contributing</h2><ul><li>有问题，提个<a href="https://github.com/owenyang0/easy-typer/issues">Issue</a></li><li>有想法，提个<a href="https://github.com/owenyang0/easy-typer/issues">Issue</a></li><li>或通过QQ群联系我：<strong>木易跟打器</strong> <code>787343469</code></li><li>有能力，提个<a href="https://github.com/owenyang0/easy-typer/pulls">PR</a></li></ul><h2 id="四、声明"><a href="#四、声明" class="headerlink" title="四、声明"></a>四、声明</h2><ol><li>本程序系私人用途，非商业产品，即不提供相应的服务</li><li>本程序所有数据均保存在用户浏览器的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API">IndexedDB</a>中，<strong>不会上传到任何服务器</strong></li><li>如果有侵权行为，请联系：<a href="mailto:`songallica@gmail.com">`songallica@gmail.com</a>`，会在看到后第一时间取消</li><li>用户使用本程序所引发的一切问题，由用户自己承担，本程序概不负责</li><li><strong>使用本程序则旨在接受本条及以上条款</strong></li></ol><h2 id="五、操作说明"><a href="#五、操作说明" class="headerlink" title="五、操作说明"></a>五、操作说明</h2><h3 id="5-1-快捷键"><a href="#5-1-快捷键" class="headerlink" title="5.1 快捷键"></a>5.1 快捷键</h3><ul><li><code>F4</code>：激活QQ聊天窗口，从当前鼠标位置载文（确保鼠标在需要载文的消息上面）</li><li><code>Ctrl</code> + <code>v</code>：从剪切板载文（Mac下为<code>Cmd</code> + <code>v</code>，与粘贴快捷键一致）</li><li><code>F3</code>：重打</li><li><code>Esc</code>：暂停</li><li><code>Enter</code>: 继续</li></ul><h3 id="5-2-载文"><a href="#5-2-载文" class="headerlink" title="5.2 载文"></a>5.2 载文</h3><p>由于QQ macOS版本的限制，无法全文获取。可将鼠标移至聊天窗口对应消息位置，按<code>F4</code>载入文本。</p><ol><li>『赛文文字』从QQ群使用指令获取赛文，然后鼠标移至赛文外，按<code>F4</code>即可</li><li>『自由文本』将要打的文本复制到剪切板，然后到主页粘贴即可</li></ol><h3 id="5-3-打文"><a href="#5-3-打文" class="headerlink" title="5.3 打文"></a>5.3 打文</h3><blockquote><p>载文后，下方的输入框自动获取焦点，当按下任<strong>意键</strong>时，开始计时。</p></blockquote><blockquote><p>打文过程中可以使用<code>Esc</code>暂停。暂停后，使用<code>Enter</code>继续，按下<code>Enter</code>后，输入框自动获取焦点，并立即继续计时。</p></blockquote><blockquote><p>如果打的过程中，或完成后，对结果不满意，可以按<code>F3</code>重新开始。计时会清零，并等待第一个键按下后，再次开始计时。</p></blockquote><blockquote><p>如果赛文较长，而对照文本区域无法完全显示，那么在打文过程中，对照文本会自动根据输入进度移动滚动条，方便跟打。</p></blockquote><blockquote><p>如果在打文时输入错误的字词，会以指定颜色的背景（默认是红色）显示。</p></blockquote><blockquote><p>跟打时，必须将赛文<strong>全部输入正确</strong>才会停止计时，如果发现打完最后一个字时，并没有提示完成，计时还在继续，则需要到对照文本中查找被标成错误背景的字词并加以修正，直至全部正确。</p></blockquote><h4 id="词语提示"><a href="#词语提示" class="headerlink" title="词语提示"></a>词语提示</h4><blockquote><p>程序提供词语提示功能，方便前期掌握词库中的词语。</p></blockquote><blockquote><p>在词语提示功能打开时，程序会将赛文中的词语去词库中匹配，并计算出<strong>码长最短</strong>的一个组合，这个码长就是理论码长。</p></blockquote><blockquote><p>开始输入后，如果没按词语提示的内容输入，那么提示的内容会同时进行调整，提示从当前位置开始的码长最短的组合。</p></blockquote><p>基础的词语提示以间隔加粗的方式展示，如：“这个<strong>码长</strong>短”。在此基础上，还提供：</p><ul><li>码长提示：用不同的颜色（不是背景颜色）来区分1，2，3，4码的字词。</li><li>选重提示：在需要选重的字词下方增加下划线，并在下划线下方显示选重键。如果某个字词不需要选重，则下方什么都不显示。</li><li>编码提示：在字词下方显示该字词的编码（不含选重键）。除了该方式外，界面右上角也有编码及选重键的提示。</li><li>标点顶屏：在可以使用标点顶屏的字词下显示顶屏提示（默认是“顶”字），如果某个首选字词后是标点，则可以利用标点直接将首选上屏，这样可以减少1码。</li></ul><p><strong><em>词语提示需要上传码表后才可以使用，具体见设置中的相关内容</em></strong></p><h3 id="5-4-发送成绩"><a href="#5-4-发送成绩" class="headerlink" title="5.4 发送成绩"></a>5.4 发送成绩</h3><p>跟打结束后，成绩会<strong>自动</strong>发送至QQ群当前激活的窗口并发送，并复制到系统剪切板</p><p>如不想自动发送成绩，可在左侧开启 <strong><code>潜水</code></strong> 模式</p><h3 id="5-5-查看理想编码"><a href="#5-5-查看理想编码" class="headerlink" title="5.5 查看理想编码"></a>5.5 查看理想编码</h3><p>程序能根据词库中的词条计算出理想码长，也可以计算出该码长对应的编码。点击左侧面板中的<code>理想</code>二字，即可查看理想编码对应的编码。</p><h3 id="5-6-查看录入的编码"><a href="#5-6-查看录入的编码" class="headerlink" title="5.6 查看录入的编码"></a>5.6 查看录入的编码</h3><p>程序会记录打文过程中按下的每一个按键，点击左侧面板中的<code>码长</code>二字，即可查看打文过程中按下的所有按键。</p><h2 id="六、设置"><a href="#六、设置" class="headerlink" title="六、设置"></a>六、设置</h2><blockquote><p>设置中的变更，除了上传码表文件会自动保存外，其余的变动均需手动点击下方的”保存按钮进行保存</p></blockquote><ul><li><code>保存</code>: 将变更写入数据库</li><li><code>重置</code>：恢复设置到数据库中的状态</li><li><code>恢复默认</code>: 将所有设置恢复到默认状态</li></ul><h3 id="6-1-基础设置"><a href="#6-1-基础设置" class="headerlink" title="6.1 基础设置"></a>6.1 基础设置</h3><ul><li><code>自动重新开始</code>：当删除输入的所有文字后自动重新开始</li><li><code>结束条件</code>: 赛文结束的条件，默认为赛文中所有的字及标点都正确时结束。<code>打完</code>则比较赛文和输入的长度，一致就认为结束。但在结束时如果输入的内容中有错字，则每错一个字罚5个字，会导致速度降低</li></ul><h3 id="6-2-词提设置"><a href="#6-2-词提设置" class="headerlink" title="6.2 词提设置"></a>6.2 词提设置</h3><ul><li><code>词语提示</code>: 总开关，关闭时不会进行词语提示，默认关闭</li><li><p><code>码表文件</code>: 输入法使用的码表文件，文件使用<code>多多格式</code>，<code>UTF-8</code>编码，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">五  pf</span><br><span class="line">五笔    pfr</span><br><span class="line">笔  rkq</span><br></pre></td></tr></table></figure></li><li><p><code>提示选项</code>：选择提示内容，<code>词语</code>是必选的。</p></li><li><code>候选词条数</code>: 输入法每页候选词条数，对于需要翻页的字词，会的选重提示上增加<code>翻页键</code>。默认：9</li><li><code>最大候选词位置</code>：为避免某些生僻词位置过去靠后，可以通过设置该值，将位置过于靠后的词略掉，拆成位置更靠前一些的短词或单字。该设置可能会影响码长。默认：0</li><li><code>翻页键</code>：指定的词条位置比较靠后，需要翻页才能选择时，会在选重码提示上增加该符号。只需要指定提示的符号，方便自己识别，即使输入法设置了多组翻页键。默认：+</li><li><code>选重键</code>：提示时展示的选重键。每个字符表示一个选重键，字符数不得少于<code>候选词条数</code>。默认：<code>␣23456789</code></li><li><code>选重键文本</code>：选重键对应的文本，当这些字符出现在字词后面时，<strong>必须</strong>手动选择词条。默认：<code>234567890;+&#39;＋；’</code></li><li><code>标点顶屏提示</code>: 顶屏提示符号</li><li><code>四码唯一自动上屏</code>：如题</li><li><code>第五码首选上屏</code>：如题</li></ul><h3 id="6-3-成绩设置"><a href="#6-3-成绩设置" class="headerlink" title="6.3 成绩设置"></a>6.3 成绩设置</h3><ul><li>标识：赛文标识，如<code>第999段</code></li><li>速度：每分钟输入的字数，数值越大说明打字的速度越快</li><li>击键：每秒钟敲击按键的次数</li><li>码长：平均每个字（含标点符号）所需要的按键次数</li><li>理想码长：程序计算出的最短码长</li><li>字数：文章总字数</li><li>错字：结束时输入的错字数</li><li>用时：总时间，单位秒</li><li>暂停：打文时暂停的次数和总暂停时长</li><li>键准：按键准确率，退格数及回改数作为失误按键来源，算法：<code>(总按键数 - 退格数 - 回改数 * 平均码长) / 总按键数</code></li><li>键法：左手与右手按键数的均衡性，算法：<code>(1 - abs(左 - 右) / (左 + 右)) * 100</code></li><li>左：左手按键次数</li><li>右：右手按键次数</li><li>打词：有多少字是通过词组的方式输入的</li><li>打词率：打词数占总字数的比率</li><li>选重：要输入的字词不在首选位置的次数</li><li>回改：输入错误被删除的字数</li><li>键数：总按键次数</li><li>退格：退格键被按次数</li><li>回车：回车键被按次数</li><li>重打：重新打的次数</li><li>版本：版本信息</li><li>输入法：所使用的输入法名称</li><li>个性签名：想立的Flag</li></ul><h3 id="6-4-标点设置"><a href="#6-4-标点设置" class="headerlink" title="6.4 标点设置"></a>6.4 标点设置</h3><p>标点用于：</p><ul><li>顶屏计算：仅用于顶屏计算，不将标点加入码表</li><li>码表及顶屏计算：将标点加入码表，防止码表中的标点码长过长</li></ul><blockquote><p>如果需要将标点加入码表，则需要重新导入词库文件</p></blockquote><h3 id="6-5-载文设置"><a href="#6-5-载文设置" class="headerlink" title="6.5 载文设置"></a>6.5 载文设置</h3><ul><li><code>去除空格</code>: 移除文章中的所有空白字符，包括：空格、回车、换行、制表符等</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img style=&quot;max-height:400px;&quot; alt=&quot;木易跟打器macOS版&quot; src=&quot;https://typer.owenyang.top/img/logo-lanscape%402x.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;木易跟打器&lt;/stron
      
    
    </summary>
    
      <category term="软件工具" scheme="https://owenyang0.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="跟打器" scheme="https://owenyang0.github.io/tags/%E8%B7%9F%E6%89%93%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>编写可维护性CSS之二，语义化</title>
    <link href="https://owenyang0.github.io/2016/05/19/MaintainableCSS-Semantics/"/>
    <id>https://owenyang0.github.io/2016/05/19/MaintainableCSS-Semantics/</id>
    <published>2016-05-19T22:59:14.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一个系列，谈论所有有关编写可维护性CSS。<br>翻译自：<a href="http://maintainablecss.com/">MaintainableCSS</a><br>完整版：<a href="http://owenyang0.github.io/maintainablecss-cn/chapters/semantics/">maintainablecss-cn/chapters/semantics/</a></p></blockquote><blockquote><p><strong>译者：</strong><br><i class="fa fa-github-square" aria-hidden="true"></i> <a href="https://github.com/owenyang0">Owen Yang</a><br><i class="fa fa-github-square" aria-hidden="true"></i> <a href="https://github.com/bangwu">Bang Wu</a></p></blockquote><p><strong>概述:</strong> 基于这 <em>是</em> 什么命名，而不是基于它 <em>像</em> 什么或 <em>能做</em> 什么命名。</p><h2 id="长版本解释"><a href="#长版本解释" class="headerlink" title="长版本解释"></a>长版本解释</h2><p>语义化(semantic)的 HTML 不仅仅关乎我们所使用的元素&mdash;&mdash;你当然知道一个链接应该使用 <code>&lt;a&gt;</code> 标签，表格数据应该使用 <code>&lt;table&gt;</code> 标签，段落使用 <code>&lt;p&gt;</code> 等等。</p><p>更重要的是，它和我们所添加的类名(class names)和IDs有关。而类名和IDs为 CSS 和 JavaScript提供额外的机制，让我们更容易去操作和增强 HTML 元素。</p><p>很容易出现不经过思考而随意添加类名的场景，但现实中命名却又特别重要。</p><blockquote><p>&ldquo;在计算机科学领域，有两大难题，如何让缓存失效(cache invalidation)和如何给各种东西命名。&rdquo;<br><br>&mdash; <cite>Phil Karlton, 网景架构师</cite></p></blockquote><p>这是由于人只是擅长和人沟通，却不太能理解简短的，不具有语义化的抽象概念。</p><h2 id="类名好坏对比"><a href="#类名好坏对比" class="headerlink" title="类名好坏对比"></a>类名好坏对比</h2><p>试着找出非语义化和语义化类名的区别…<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不好 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red pull-left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-4&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里完全看不出这段 HTML 代码要表达 <em>什么</em>。你 <em>可能</em> 会说它 <em>看起来</em> 怎样（比如应该在小屏幕还是大屏幕上），但也就仅此而已。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 好 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basket&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;searchResults&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这段代码就正是我所推崇的。我很清楚地知道这段 HTML 代表着什么。虽然我不知道它看起来应该是怎样的，但我并不在乎，这是 CSS 存在的价值。而语义化的类名对 HTML 和 CSS 甚至 JS 都很有意义。</p><p>所以，<em>为什么</em> 我们应该使用语义化的类名呢？</p><h2 id="因为更容易理解"><a href="#因为更容易理解" class="headerlink" title="因为更容易理解"></a>因为更容易理解</h2><p>若使用语义化类名，不论你是在修改 HTML 或者 CSS，你都清楚你将造成的影响。而使用视觉化类名(visual class names)的方式，你不得不在每一个元素上写很多类名，最终你可能只是对这些类名有一个模糊的理解，而不清楚它真正的意图是什么。而且，视觉化类名非常难以维护。</p><h2 id="因为要构建响应式站点"><a href="#因为要构建响应式站点" class="headerlink" title="因为要构建响应式站点"></a>因为要构建响应式站点</h2><p>一般说来，不同的视图(viewport)会有不同的样式。比如，你可能需要在大屏上浮动(float)一个元素，在小屏不浮动。如果你有一个叫 <code>.clearfix</code> 的类名来清理浮动，但在小屏上的效果却和类名不一样，这看起来会不会让人困惑呢？</p><p>使用语义化的类名，你就会基于 mediea queries 去编写样式，这会让 CSS 更易维护。</p><h2 id="因为更容易查找"><a href="#因为更容易查找" class="headerlink" title="因为更容易查找"></a>因为更容易查找</h2><p>如果一个元素是基于其外在表像命名，比如 <code>.red</code>, <code>.clearfix</code>, 和 <code>.pull-left</code> 等，那么这些类名就会像垃圾一样散落在代码库的任何地方&mdash;&mdash;当你搜索一段特定的 HTML 代码的时候，类名不会起任何作用。</p><p>换句话说，如果你的类名足够语义化，搜索特定代码片段是很简单的事。更常见的是，当你从头搜索你的 HTML(想像一下浏览器上的审查元素)去找类名的时候，查找唯一的 CSS 选择器肯定会快很多。</p><h2 id="因为不想做无故的回归测试"><a href="#因为不想做无故的回归测试" class="headerlink" title="因为不想做无故的回归测试"></a>因为不想做无故的回归测试</h2><p>如果你使用描述性的，非语义化的类名，那么当你修改其中一个类名的时候，样式的改变会影响每一个使用这个类名的元素。基于你使用 CSS 的经验，你能保证你的修改不会在其他地方产生不可预知的问题吗？</p><p>语义化的类名是唯一的，所以当你编辑其中一个的时候，你 <em>能</em> 自信地说，你的修改只会影响你想要改变的那个模块，维护起来更简单。</p><h2 id="因为不用再恐惧更新代码"><a href="#因为不用再恐惧更新代码" class="headerlink" title="因为不用再恐惧更新代码"></a>因为不用再恐惧更新代码</h2><p>和前一个有关回归测试的那一点有关，当你对修改的代码不够自信的时候，你很有可能会造成 BUG 接着便会由于害怕出错而不再碰那些代码。更可怕的是会造成恶性循环，写很多冗余代码，最后变得越来越不具有可维护性。</p><h2 id="因为有助于自动化测试"><a href="#因为有助于自动化测试" class="headerlink" title="因为有助于自动化测试"></a>因为有助于自动化测试</h2><p>自动化功能测试需要定位特定的元素，与其进化交互（输入文本，点击按钮、链接等等），基于这些操作进行相关校验。</p><p>若你的 HTML 通篇都使用描述性的类名，那么你将不会有一个可靠方式去定位一个特定的元素，更惶论与其交互了。</p><h2 id="因为为JavaScript提供了有意义的接口"><a href="#因为为JavaScript提供了有意义的接口" class="headerlink" title="因为为JavaScript提供了有意义的接口"></a>因为为JavaScript提供了有意义的接口</h2><p>就像和自动化测试一样，语义化的类名对JavaScript来说同样有意义。描述性的类名不具有可靠性，不可用于定位相应的模块或组件。</p><h2 id="因为常规维护的担心"><a href="#因为常规维护的担心" class="headerlink" title="因为常规维护的担心"></a>因为常规维护的担心</h2><p>若你是基于该元素是什么而命名，你就不必再次修改 HTML 的类名。如，heading 始终是 heading, 你不用管它变成什么样子。</p><p>样式可能会改变，但你只需要改变你的 CSS。这在另一个方面来说，实际是上松耦合从而提高了可维护性。</p><h2 id="因为非语义类名调试困难"><a href="#因为非语义类名调试困难" class="headerlink" title="因为非语义类名调试困难"></a>因为非语义类名调试困难</h2><p>当你调试(debug)一个元素的时候，会出现很多类似的 CSS 选择器，增加了调试的难度。</p><h2 id="因为标准推荐使用"><a href="#因为标准推荐使用" class="headerlink" title="因为标准推荐使用"></a>因为标准推荐使用</h2><p>HTML5 的规范在 <a href="https://www.w3.org/TR/html5/dom.html#classes">3.2.5.7</a> 里有说，使用类名属性。</p><blockquote><p>“[…] 更鼓励使用能描述内容本质的类名，而不是那些只是描述其外在表像的值。”</p></blockquote><h2 id="因为能带来性能的提升"><a href="#因为能带来性能的提升" class="headerlink" title="因为能带来性能的提升"></a>因为能带来性能的提升</h2><p>这是一个 <em>非常</em> 小的优势，因为当你一个元素只有一个类名的时候，你的整个 HTML 代码体积都会更小。而使用描述性的类名，每个元素有无数个类名，结果自然与前者不一样。</p><h2 id="因为和重用规则有关"><a href="#因为和重用规则有关" class="headerlink" title="因为和重用规则有关"></a>因为和重用规则有关</h2><p>如果你没有使用语义化类名，你有可能会是误解了重用(reuse)的概念，而误用重用。阅读下章，获得更多。</p><!--## Why? Because visual class names might declare the same property!It's likely that several different utility classes could refer to the same property meaning order matters and performance degrades.Think of an example of this.--><h2 id="最后想想语义化"><a href="#最后想想语义化" class="headerlink" title="最后想想语义化"></a>最后想想语义化</h2><p>语义化的类名是 <em>MaintainableCSS</em> 的基石，没有它，一切都没意义。所以，基于是什么命名，其他所有都将受益。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是一个系列，谈论所有有关编写可维护性CSS。&lt;br&gt;翻译自：&lt;a href=&quot;http://maintainablecss.com/&quot;&gt;MaintainableCSS&lt;/a&gt;&lt;br&gt;完整版：&lt;a href=&quot;http://owenyang0.gi
      
    
    </summary>
    
    
      <category term="MaintainableCSS" scheme="https://owenyang0.github.io/tags/MaintainableCSS/"/>
    
      <category term="CSS" scheme="https://owenyang0.github.io/tags/CSS/"/>
    
      <category term="Semantics" scheme="https://owenyang0.github.io/tags/Semantics/"/>
    
  </entry>
  
  <entry>
    <title>编写可维护性CSS之一，前言</title>
    <link href="https://owenyang0.github.io/2016/05/19/MaintainableCSS-introduction/"/>
    <id>https://owenyang0.github.io/2016/05/19/MaintainableCSS-introduction/</id>
    <published>2016-05-19T22:27:27.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一个系列，谈论所有有关编写可维护性CSS。<br>翻译自：<a href="http://maintainablecss.com/">MaintainableCSS</a><br>完整版：<a href="http://owenyang0.github.io/maintainablecss-cn/chapters/introduction/">maintainablecss-cn/chapters/introduction/</a></p></blockquote><blockquote><p><strong>译者：</strong><br><i class="fa fa-github-square" aria-hidden="true"></i> <a href="https://github.com/owenyang0">Owen Yang</a><br><i class="fa fa-github-square" aria-hidden="true"></i> <a href="https://github.com/bangwu">Bang Wu</a></p></blockquote><p><em>MaintainableCSS</em> 是一种编写模块化、可扩展和易维护的CSS的架构。</p><p>在实际情况下，这意味着，作为一个开发者，当我想创建一个新的功能或者修改已有的功能的时候，我不需要担心会使原来的代码变的更糟。</p><h2 id="什么都不需要下载"><a href="#什么都不需要下载" class="headerlink" title="什么都不需要下载"></a>什么都不需要下载</h2><p><em>MaintainableCSS</em> 是不需要下载的。这只是一套帮助你构建大规模或者小规模网站的原则、指南和约定。</p><h2 id="可维护的意义是什么？"><a href="#可维护的意义是什么？" class="headerlink" title="可维护的意义是什么？"></a>可维护的意义是什么？</h2><p>有一份可维护的代码意味着当你编辑一个模块的样式的时候不需要担心意外的改变的其他模块的代码。我清楚的知道我写出的代码是经过封装的。</p><h2 id="可维护的意义是什么？-1"><a href="#可维护的意义是什么？-1" class="headerlink" title="可维护的意义是什么？"></a>可维护的意义是什么？</h2><p>这意味着, 当CSS代码库的大小增长的时候, 维护这些代码不会有任何困难. 如果你曾经继承了一个大的CSS代码库并且害怕去编辑这些已有的样式,你就会深有感触了。</p><h2 id="模块化的意义是什么？"><a href="#模块化的意义是什么？" class="headerlink" title="模块化的意义是什么？"></a>模块化的意义是什么？</h2><p>模块是一个特殊的、独立的单元，可以与其他的模块进行组合，以便形成更加复杂的单元。例如在一个客厅，你可以把电视、沙发和墙分别看成模块，这些组合在一起就是一个可以使用的房间。</p><p>如果你带走其中一个单元，其他的任然能够工作的很好，没有电视你也能坐在沙发上，在一个网站上，页眉、页脚、产品列表和文章，这些都可以考虑为一个模块。</p><h2 id="这适合谁？"><a href="#这适合谁？" class="headerlink" title="这适合谁？"></a>这适合谁？</h2><p>如果你曾经经历过维护CSS的痛苦，这本书可以帮助你避免常见的问题。无论的你的组是1个人或者是100个人，你都能在这本书上找到有用的建议。如果你的网站正在发展，你更加需要这本书。</p><h2 id="这学起来难吗？"><a href="#这学起来难吗？" class="headerlink" title="这学起来难吗？"></a>这学起来难吗？</h2><p>我想说的是这很容易学。你可以在20分钟内读完这本书并且在几分钟内使用这些规则。如果你发现了任何错误请及时通知我。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是一个系列，谈论所有有关编写可维护性CSS。&lt;br&gt;翻译自：&lt;a href=&quot;http://maintainablecss.com/&quot;&gt;MaintainableCSS&lt;/a&gt;&lt;br&gt;完整版：&lt;a href=&quot;http://owenyang0.gi
      
    
    </summary>
    
    
      <category term="MaintainableCSS" scheme="https://owenyang0.github.io/tags/MaintainableCSS/"/>
    
      <category term="CSS" scheme="https://owenyang0.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Babel和Rollup，开始构建发布你的ES6模块(Modules)</title>
    <link href="https://owenyang0.github.io/2016/05/14/Build-and-Public-ES6-Modules-Today/"/>
    <id>https://owenyang0.github.io/2016/05/14/Build-and-Public-ES6-Modules-Today/</id>
    <published>2016-05-14T18:06:26.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>早在2015年六月，ES2015规范或者叫ES6就正式被ECMA国际协会(Ecma International)批准，成为了新一代的语言标准。2016年四月，Node.js团队发布了号称支持93%的ES6语言特性的Node v6，不过这一切还是由于V8引擎v5.0的发布。</p><p>是应该使用最新的语言特性，ES6+的语法，还是应该使用第三方库与polyfills来编写一个JavaScript库？相信这个问题一定困扰着写JavaScript库的你，因为这很难说前者会比后者有更大的优势。私以为，前者能减少代码冗余，让代码更可读，使用更少的抽象，让代码库更容易维护与扩展，提高开发效率等等。</p><p>如果你正在开发一个全新的基于Node.js平台的JavaScript库(npm 包), 那基于Node.js v6环境使用最新的特性将是一个很好的选择。你也可以同时提供给Node v5或者更老版本的开发者一个回退版本(fallback)，如此一来Node v6的用户也可以正常地使用你的库：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyLibrary</span> = <span class="built_in">require</span>(<span class="string">&#x27;my-library&#x27;</span>);</span><br></pre></td></tr></table></figure></p><p>在Node.js v6的环境，代码将是最简洁优雅的。同时也得保证使用Node 0.x, 4.x, 5.x的用户能够导入ES5.1版本的库：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyLibrary</span> = <span class="built_in">require</span>(<span class="string">&#x27;my-library/legacy&#x27;</span>);</span><br></pre></td></tr></table></figure></p><p>除此以外，强烈推荐将使用ES2015模块语法的版本也放在你的NPM包中。虽然ES2015的<a href="https://twitter.com/koistya/status/726042867211325440">模块系统</a>还无法在Node.js或者V8中使用，但Node.js和前端社区早已大量地使用这种规范组织代码，这一切都归功于模块打包工具(module bundlers)，如Webpack, Berify, JSPM，Babel等等。</p><p>若要使用ES6的方式发布你的包，你项目的目录结构看起来可能会像这样：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── /dist/                  # Temp folder for compiled output</span><br><span class="line">│   ├── /legacy/            # Legacy bundle(s) for Node 0.x, 4.x</span><br><span class="line">│   │   ├── /main.js        # ES5.1 bundle for Node 0.x, 4.x</span><br><span class="line">│   │   └── /package.json   # Legacy NPM module settings</span><br><span class="line">│   ├── /main.js            # ES6 bundle /w CommonJS for Node v6</span><br><span class="line">│   ├── /main.mjs           # ES6 bundle /w Modules for cool kids</span><br><span class="line">│   ├── /main.browser.js    # ES5.1 bundle for browsers</span><br><span class="line">│   ├── /my-library.js      # UMD bundle for browsers</span><br><span class="line">│   ├── /my-library.min.js  # UMD bundle, minified and optimized</span><br><span class="line">│   └── /package.json       # NPM module settings</span><br><span class="line">├── /node_modules/          # 3rd-party libraries and utilities</span><br><span class="line">├── /src/                   # ES2015+ source code</span><br><span class="line">│   ├── /main.js            # The main entry point</span><br><span class="line">│   ├── /sub-module-a.js    # A module referenced in main.js</span><br><span class="line">│   └── /sub-module-b.js    # A module referenced in main.js</span><br><span class="line">├── /test/                  # Unit and end-to-end tests</span><br><span class="line">├── /tools/                 # Build automation scripts and utilities</span><br><span class="line">│   └── /build.js           # Builds the project with Babel/Rollup</span><br><span class="line">└── package.json            # Project settings</span><br></pre></td></tr></table></figure><br>在 <em>src</em> 目录里包含了你项目的源代码(当然是ES2015+规范)，<em>dist</em> (或者 <em>build</em> )目录则是在你构建工程时动态生成的。通过 <em>dist</em> 目录，你可以发布你的NPM包(package)，里面包含了使用Babel和Webapck编译出来的符合CommonJS, ES6，和UMD规范的包(bundle).</p><p>在你的 <em>package.json</em> 文件里面会包含这些bundle的引用：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my-library&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;jsnext:main&quot;: &quot;main.mjs&quot;,</span><br><span class="line">  &quot;browser&quot;: &quot;main.browser.js&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>tools/build.js</code>脚本是一种便捷的方式去配置你的编译过程，它看起来可能会像这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">&#x27;del&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rollup = <span class="built_in">require</span>(<span class="string">&#x27;rollup&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-babel&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bundles = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>, <span class="attr">ext</span>: <span class="string">&#x27;.js&#x27;</span>, <span class="attr">plugins</span>: [],</span><br><span class="line">    <span class="attr">babelPresets</span>: [<span class="string">&#x27;stage-1&#x27;</span>], <span class="attr">babelPlugins</span>: [</span><br><span class="line">      <span class="string">&#x27;transform-es2015-destructuring&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;transform-es2015-function-name&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;transform-es2015-parameters&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;es6&#x27;</span>, <span class="attr">ext</span>: <span class="string">&#x27;.mjs&#x27;</span>, <span class="attr">plugins</span>: [],</span><br><span class="line">    <span class="attr">babelPresets</span>: [<span class="string">&#x27;stage-1&#x27;</span>], <span class="attr">babelPlugins</span>: [</span><br><span class="line">      <span class="string">&#x27;transform-es2015-destructuring&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;transform-es2015-function-name&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;transform-es2015-parameters&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>, <span class="attr">ext</span>: <span class="string">&#x27;.browser.js&#x27;</span>, <span class="attr">plugins</span>: [],</span><br><span class="line">    <span class="attr">babelPresets</span>: [<span class="string">&#x27;es2015-rollup&#x27;</span>, <span class="string">&#x27;stage-1&#x27;</span>], <span class="attr">babelPlugins</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>, <span class="attr">ext</span>: <span class="string">&#x27;.js&#x27;</span>, <span class="attr">plugins</span>: [],</span><br><span class="line">    <span class="attr">babelPresets</span>: [<span class="string">&#x27;es2015-rollup&#x27;</span>, <span class="string">&#x27;stage-1&#x27;</span>], <span class="attr">babelPlugins</span>: [],</span><br><span class="line">    <span class="attr">moduleName</span>: <span class="string">&#x27;my-library&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>, <span class="attr">ext</span>: <span class="string">&#x27;.min.js&#x27;</span>, <span class="attr">plugins</span>: [<span class="title function_">uglify</span>()]</span><br><span class="line">    <span class="attr">babelPresets</span>: [<span class="string">&#x27;es2015-rollup&#x27;</span>, <span class="string">&#x27;stage-1&#x27;</span>], <span class="attr">babelPlugins</span>: [],</span><br><span class="line">    <span class="attr">moduleName</span>: <span class="string">&#x27;my-library&#x27;</span>, <span class="attr">minify</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Clean up the output directory</span></span><br><span class="line">promise = promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">del</span>([<span class="string">&#x27;dist/*&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compile source code into a distributable format with Babel and Rollup</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> config <span class="keyword">of</span> bundles) &#123;</span><br><span class="line">  promise = promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> rollup.<span class="title function_">rollup</span>(&#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">external</span>: <span class="title class_">Object</span>.<span class="title function_">keys</span>(pkg.<span class="property">dependencies</span>),</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="title function_">babel</span>(&#123;</span><br><span class="line">        <span class="attr">babelrc</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="string">&#x27;node_modules/**&#x27;</span>,</span><br><span class="line">        <span class="attr">presets</span>: config.<span class="property">babelPresets</span>,</span><br><span class="line">        <span class="attr">plugins</span>: config.<span class="property">babelPlugins</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    ].<span class="title function_">concat</span>(config.<span class="property">plugins</span>),</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">bundle</span> =&gt;</span> bundle.<span class="title function_">write</span>(&#123;</span><br><span class="line">    <span class="attr">dest</span>: <span class="string">`dist/<span class="subst">$&#123;config.moduleName || <span class="string">&#x27;main&#x27;</span>&#125;</span><span class="subst">$&#123;config.ext&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">format</span>: config.<span class="property">format</span>,</span><br><span class="line">    <span class="attr">sourceMap</span>: !config.<span class="property">minify</span>,</span><br><span class="line">    <span class="attr">moduleName</span>: config.<span class="property">moduleName</span>,</span><br><span class="line">  &#125;)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copy package.json and LICENSE.txt</span></span><br><span class="line">promise = promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">delete</span> pkg.<span class="property">private</span>;</span><br><span class="line">  <span class="keyword">delete</span> pkg.<span class="property">devDependencies</span>;</span><br><span class="line">  <span class="keyword">delete</span> pkg.<span class="property">scripts</span>;</span><br><span class="line">  <span class="keyword">delete</span> pkg.<span class="property">eslintConfig</span>;</span><br><span class="line">  <span class="keyword">delete</span> pkg.<span class="property">babel</span>;</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;dist/package.json&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(pkg, <span class="literal">null</span>, <span class="string">&#x27;  &#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;dist/LICENSE.txt&#x27;</span>, fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;LICENSE.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>)); <span class="comment">// eslint-disable-line no-console</span></span><br><span class="line"><span class="comment">// https://gist.github.com/koistya/1abc156c61814fc307210f33e127f124</span></span><br></pre></td></tr></table></figure></p><p>现在你只需要简单运行 <code>node tools/build</code> (假定你已经在本地装好了Node.js v6)，就可以构建你的牛X库了，然后你只需要在 <code>dist</code> 目录下，将代码发布到NPM就OK了。</p><p>希望该博可以对你有所帮助，这或许是将你的牛库是以ES6发布在NPM上的最好方式。你也可以在这里看到预配置好的发布NPM包的样板文件：<a href="https://github.com/kriasoft/babel-starter-kit">https://github.com/kriasoft/babel-starter-kit</a></p><p>如果你发现有什么遗漏，不清楚，欢迎留言 :)</p><p>[译]<a href="https://medium.com/@tarkus/how-to-build-and-publish-es6-modules-today-with-babel-and-rollup-4426d9c7ca71#.38s3c7m0q">How to Build and Publish ES6 Modules Today, with Babel and Rollup</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早在2015年六月，ES2015规范或者叫ES6就正式被ECMA国际协会(Ecma International)批准，成为了新一代的语言标准。2016年四月，Node.js团队发布了号称支持93%的ES6语言特性的Node v6，不过这一切还是由于V8引擎v5.0的发布。&lt;
      
    
    </summary>
    
      <category term="技术沉淀" scheme="https://owenyang0.github.io/categories/%E6%8A%80%E6%9C%AF%E6%B2%89%E6%B7%80/"/>
    
    
      <category term="Babel" scheme="https://owenyang0.github.io/tags/Babel/"/>
    
      <category term="Rollup" scheme="https://owenyang0.github.io/tags/Rollup/"/>
    
      <category term="Modules" scheme="https://owenyang0.github.io/tags/Modules/"/>
    
      <category term="ES6" scheme="https://owenyang0.github.io/tags/ES6/"/>
    
      <category term="NPM" scheme="https://owenyang0.github.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>赶在2015最后一班车</title>
    <link href="https://owenyang0.github.io/2016/01/03/%E8%B5%B6%E5%9C%A82015%E6%9C%80%E5%90%8E%E4%B8%80%E7%8F%AD%E8%BD%A6/"/>
    <id>https://owenyang0.github.io/2016/01/03/赶在2015最后一班车/</id>
    <published>2016-01-03T00:15:17.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2015人在路上，心在外边。</p></blockquote><h3 id="别煽情了"><a href="#别煽情了" class="headerlink" title="别煽情了"></a>别煽情了</h3><blockquote><p>一切都是安好，一段刻骨铭心却注定未果的交往，一场不闻外事说走就走的旅行，一人默默品尝苦辣酸甜的生活，以及一丝从未消逝掉的那抹期待。慢慢地，学会了一个人。</p></blockquote><p>早已不是当初的那只雏鸟，却也算不得自由挥翅的雄鹰，这是毕业后完整的一年，同学之间见得少了，朋友之间的联系也不是那么多了，每个人都生活在新的圈子里，或是独自承受，或是开始担当。不是忘了，兴许是累了，应该不会有人去忘却曾经的岁月青葱，如果有那么天，定会想起当初的约定，初心么？</p><p>学不会怎么去煽情，也不懂如何去述事，每每有一点东西，欲从内心深处蹦出，却又在键盘上的指间错过。</p><p>时间下午，还有夕阳。地点武汉，开往机场。人物出租车师傅以及自己，漫天黄沙与雾霾。就在沙与霾的包裹中，从夕阳时走到晚上，视野早已不清楚，不是因为没有灯，是因为灯光下的世界是那么的模糊。<br><img src="/images/airport.jpg" alt="airport" title="airport"></p><h3 id="要实在点"><a href="#要实在点" class="headerlink" title="要实在点"></a>要实在点</h3><ul><li><p><strong>读书</strong> 是个严肃活儿，有计划，有目标，有方向才能更好地读懂生活。去年，或许只有读书计划完成了，貌似是因为也没其他的计划。翻了一下去年的总结，计划不多，一年30本书，足矣。</p><ul><li>相比于2014，也是有了长足的进步。20本 –&gt; 33本。</li><li>明年，2016，成长着，<em><em>50本</em></em>。</li></ul></li><li><p><strong>文字</strong> 很神奇，放得越久越能感受其伟大。回看2014的总结，才知当时自己是种怎样的心境。记录生活，记录自己，不是把自己复制，只求某一天回首时，能发现自己也走过如些不一般的道路。</p></li><li><p><strong>旅行</strong> 不是放纵，也许是放松，但对某些人更可能是灵魂的洗涤净化。日本有去，古都文化，走着走着，你会顿悟吗？下一站，你说呢？</p></li><li><p><strong>英语</strong> 这东西怎么说呢，日常似乎也能应付，但缺乏系统地掌握。身处这样一个环境之中，是多么好的机会，明年要不拿个雅思玩？要求别太高，_6分_ 吧。</p></li><li><p><strong>电影</strong> 不只是那么120分钟的剧情，也不是影院里的各种特效，在乎的是什么呢。今年看书算是比较多了，电影感觉也没落下，慢慢地发现电影中有太多自己没有思考过的事情，和书一样传递出思考。</p></li></ul><ul><li><strong>驾照</strong>，哟就一本儿，找个机会拿下它吧。</li></ul><h3 id="留点东西"><a href="#留点东西" class="headerlink" title="留点东西"></a>留点东西</h3><p>去年送给自己的一句话：心态，别抑郁，要乐观，诚对人，能坚持，追梦想。除了“别抑郁”，自己都做得挺好。<br>再送自己一句话，给2016:</p><blockquote><p>你就是你，不要在乎别人的比拟，自己觉得自己活得精彩那便是精彩。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2015人在路上，心在外边。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;别煽情了&quot;&gt;&lt;a href=&quot;#别煽情了&quot; class=&quot;headerlink&quot; title=&quot;别煽情了&quot;&gt;&lt;/a&gt;别煽情了&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="2015" scheme="https://owenyang0.github.io/tags/2015/"/>
    
      <category term="summary" scheme="https://owenyang0.github.io/tags/summary/"/>
    
      <category term="plan" scheme="https://owenyang0.github.io/tags/plan/"/>
    
      <category term="2016" scheme="https://owenyang0.github.io/tags/2016/"/>
    
  </entry>
  
  <entry>
    <title>Overview of ES6</title>
    <link href="https://owenyang0.github.io/2015/05/31/Overview-of-ES6/"/>
    <id>https://owenyang0.github.io/2015/05/31/Overview-of-ES6/</id>
    <published>2015-05-31T17:03:25.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>Slides in ES6 overview workshop</p><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><h3 id="What"><a href="#What" class="headerlink" title="What"></a>What</h3><p>ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准</p><h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>ES6的目标，是使得JavaScript语言可以用来编写大型的复杂的应用程序，成为企业级开发语言。<br>新的语言特性，代码更优雅，程序更健壮，减少不必要的重复，减少不必要的第三方依赖。</p><h2 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda</h2><ul><li>template strings</li><li>const</li><li>let</li><li>block-level declaration</li><li>Destructuring Assignment</li><li>arrow functions</li><li>default function params</li><li>class</li><li>module</li></ul><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>Babel <a href="https://babeljs.io/docs/usage/cli/">https://babeljs.io/docs/usage/cli/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global babel</span><br></pre></td></tr></table></figure><h2 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code."></a>Talk is cheap, show me the code.</h2><h2 id="template-strings"><a href="#template-strings" class="headerlink" title="template strings"></a>template strings</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="string">&quot;Song&quot;</span></span><br><span class="line"><span class="keyword">var</span> last = <span class="string">&quot;Yang&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">`I&#x27;m <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>!`</span>;</span><br></pre></td></tr></table></figure><p><strong>性能对比</strong><br><a href="http://heeroluo.net/article/detail/54">http://heeroluo.net/article/detail/54</a></p><p>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="keyword">typeof</span> <span class="variable language_">global</span> === <span class="string">&quot;object&quot;</span> ? <span class="variable language_">global</span> : <span class="variable language_">window</span>, <span class="string">&quot;PI&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>:        <span class="number">3.14</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:   <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>:     <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>声明变量，变量只在let命令所在代码块内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">//1</span></span><br><span class="line">b <span class="comment">// ReferenceError: b is not defined.</span></span><br></pre></td></tr></table></figure><p>let不允许在相同作用域内，重复声明同一个变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="block-level-declaration"><a href="#block-level-declaration" class="headerlink" title="block-level declaration"></a>block-level declaration</h2><ul><li>let, const 块级作用域</li><li>var 函数作用域</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=<span class="number">5</span>;i&lt;len;i++) &#123;</span><br><span class="line">        <span class="comment">//body</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i,len);=&gt; <span class="number">5</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5的JavaScript的不支持块级作用域，变量仅仅被限制到函数作用域内。</p><h3 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE写法</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = ...;</span><br><span class="line">    ...</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域写法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = ...;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="function-scope"><a href="#function-scope" class="headerlink" title="function scope"></a>function scope</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am outside!&#x27;</span>); &#125;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// What should happen with this redeclaration?</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am inside!&#x27;</span>); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">f</span>();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h2 id="Destructuring-Assignment"><a href="#Destructuring-Assignment" class="headerlink" title="Destructuring Assignment"></a>Destructuring Assignment</h2><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><h3 id="Array-destructuring"><a href="#Array-destructuring" class="headerlink" title="Array destructuring"></a>Array destructuring</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">[a, b] = [b, a];</span><br></pre></td></tr></table></figure><h3 id="模式匹配（嵌套数组）"><a href="#模式匹配（嵌套数组）" class="headerlink" title="模式匹配（嵌套数组）"></a>模式匹配（嵌套数组）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [,,third] = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>];</span><br><span class="line">third <span class="comment">// &quot;baz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="解构失败"><a href="#解构失败" class="headerlink" title="解构失败"></a>解构失败</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [foo] = [];</span><br><span class="line"><span class="keyword">var</span> [foo] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> [foo] = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> [foo] = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">var</span> [bar, foo] = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">foo <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li><p>如果对undefined或null进行解构，会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> [foo] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> [foo] = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>解构赋值允许指定默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x, y=<span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>] <span class="comment">// x=3, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>解构赋值不仅适用于var命令，也适用于let和const命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [v1, v2, ..., vN ] = array;</span><br><span class="line"><span class="keyword">let</span> [v1, v2, ..., vN ] = array;</span><br><span class="line"><span class="keyword">const</span> [v1, v2, ..., vN ] = array;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Object-destructuring"><a href="#Object-destructuring" class="headerlink" title="Object destructuring"></a>Object destructuring</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br></pre></td></tr></table></figure><p>如果变量名与属性名不一致，必须写成下面这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">p</span>: [</span><br><span class="line">    <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">&quot;World&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = o;</span><br><span class="line">x <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line">y <span class="comment">// &quot;World&quot;</span></span><br></pre></td></tr></table></figure><ul><li>对象的解构也可以指定默认值。</li><li>如果要将一个已经声明的变量用于解构赋值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// SyntaxError: syntax error</span></span><br><span class="line"></span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误。</li></ul><p><strong>NOTE</strong> 数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><h3 id="Pros-1"><a href="#Pros-1" class="headerlink" title="Pros"></a>Pros</h3><ul><li>交换变量的值</li><li>从函数返回多个值</li><li>遍历Map结构<br>配合变量的解构赋值，获取键名和键值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot; is &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输入模块的指定方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SourceMapConsumer</span>, <span class="title class_">SourceNode</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;source-map&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h2><ul><li>语法糖：function的简写，或者是使用胖箭头 () =&gt; 的Lamda表达式。</li><li>不仅仅是语法糖：自动绑定外部作用域的”this”.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">double</span> = (<span class="params">x</span>) =&gt; x * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> byTwo = items.<span class="title function_">map</span>(double);</span><br><span class="line"><span class="comment">// =&gt; [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foot = &#123;</span><br><span class="line">    <span class="attr">kickNormal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">yelp</span> = <span class="string">&quot;Ouch!&quot;</span>;</span><br><span class="line">      <span class="title function_">setImmediate</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">yelp</span>);</span><br><span class="line">      &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">kick</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">yelp</span> = <span class="string">&quot;Ouch!&quot;</span>;</span><br><span class="line">        <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">yelp</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="default-function-params"><a href="#default-function-params" class="headerlink" title="default function params"></a>default function params</h2><p>在ES6默认值特性出现前，手动处理默认值有几种方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">message, level</span>) &#123;</span><br><span class="line">  level = level || <span class="string">&#x27;warning&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(level, <span class="string">&#x27;: &#x27;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;low memory&#x27;</span>); <span class="comment">// warning: low memory</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;out of memory&#x27;</span>, <span class="string">&#x27;error&#x27;</span>); <span class="comment">// error: out of memory</span></span><br></pre></td></tr></table></figure><p>为了处理参数未传递的情况，我们常看到typeof检测:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> level == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  level = <span class="string">&#x27;warning&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有时也可以检查arguments.length</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">  level = <span class="string">&#x27;warning&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些方法都可以很好的工作，但都过于手动且缺少抽象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">message, level = <span class="string">&#x27;warning&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(level, <span class="string">&#x27;: &#x27;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;low memory&#x27;</span>); <span class="comment">// warning: low memory</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;out of memory&#x27;</span>, <span class="string">&#x27;error&#x27;</span>); <span class="comment">// error: out of memory</span></span><br></pre></td></tr></table></figure><p>参数默认值使用方便且毫无违和感。</p><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p>A formal inheritance syntax comes to JavaScript<br>Really just syntactical sugar over JS prototypical inheritance</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span> = msg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">create</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">this</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;<span class="variable language_">this</span>.msg&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">message</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span> = msg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">message</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">msg</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _createClass = (<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">function</span> <span class="title function_">defineProperties</span>(<span class="params">target, props</span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.<span class="property">length</span>; i++) &#123; <span class="keyword">var</span> descriptor = props[i]; descriptor.<span class="property">enumerable</span> = descriptor.<span class="property">enumerable</span> || <span class="literal">false</span>; descriptor.<span class="property">configurable</span> = <span class="literal">true</span>; <span class="keyword">if</span> (<span class="string">&#x27;value&#x27;</span> <span class="keyword">in</span> descriptor) descriptor.<span class="property">writable</span> = <span class="literal">true</span>; <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, descriptor.<span class="property">key</span>, descriptor); &#125; &#125; <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">Constructor, protoProps, staticProps</span>) &#123; <span class="keyword">if</span> (protoProps) <span class="title function_">defineProperties</span>(<span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>, protoProps); <span class="keyword">if</span> (staticProps) <span class="title function_">defineProperties</span>(<span class="title class_">Constructor</span>, staticProps); <span class="keyword">return</span> <span class="title class_">Constructor</span>; &#125;; &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_classCallCheck</span>(<span class="params">instance, Constructor</span>) &#123; <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> <span class="title class_">Constructor</span>)) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Cannot call a class as a function&#x27;</span>); &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Greeter</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Greeter</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">Greeter</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span> = msg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Greeter</span>.<span class="property">create</span> = <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">this</span>(msg);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Greeter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greet</span> = <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + <span class="variable language_">this</span>.<span class="property">msg</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_createClass</span>(<span class="title class_">Greeter</span>, [&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = msg;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">msg</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Greeter</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Extends"><a href="#Extends" class="headerlink" title="Extends"></a>Extends</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FancyGreeter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Greeter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">msg, name</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(msg);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, Hello <span class="subst">$&#123;<span class="variable language_">this</span>.msg&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fg = <span class="keyword">new</span> <span class="title class_">FancyGreeter</span>(<span class="string">&#x27;World&#x27;</span>, <span class="string">&#x27;Song&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fg <span class="keyword">instanceof</span> <span class="title class_">FancyGreeter</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fg <span class="keyword">instanceof</span> <span class="title class_">Greeter</span>);</span><br></pre></td></tr></table></figure><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><h3 id="export和import"><a href="#export和import" class="headerlink" title="export和import"></a>export和import</h3><p>ES6实现了模块功能，试图解决JavaScript代码的依赖和部署上的问题，取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="string">&#x27;David&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> last = <span class="string">&#x27;Belle&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1973</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;first, last, year&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;first, last, year&#125; <span class="keyword">from</span> <span class="string">&#x27;./profile&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;first <span class="keyword">as</span> f, last&#125; <span class="keyword">from</span> <span class="string">&#x27;./profile&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> profile <span class="keyword">from</span> <span class="string">&#x27;./profile&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="NOT-Included"><a href="#NOT-Included" class="headerlink" title="NOT Included"></a>NOT Included</h2><ul><li>Map, WeakMap, Set, WeakSet</li><li>Promise</li><li>Generator</li><li>Iterator</li><li>Rest Parameter</li><li>Spread Operator</li></ul><h3 id="新的内建方法"><a href="#新的内建方法" class="headerlink" title="新的内建方法"></a>新的内建方法</h3><ul><li>Object.assign</li><li>[arr].find</li><li>“str”.repeat</li><li>“str”.startsWith</li><li>“str”.endsWith</li><li>“str”.includes</li><li>Number.isNaN</li><li>Number.isFinite</li><li>Number.isSafeInteger</li><li>Math.trunc</li><li>Math.sign</li></ul><h2 id="Using-ES6-Today"><a href="#Using-ES6-Today" class="headerlink" title="Using ES6 Today"></a>Using ES6 Today</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><ul><li>io 2.2.0</li><li>node 0.12.4</li></ul><h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><ul><li>Browserify</li><li>Babel</li></ul><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><a href="http://es6-features.org/">ECMAScript 6 — New Features</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Slides in ES6 overview workshop&lt;/p&gt;
&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;h3 id=&quot;What&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>两分钟了解ReactiveX</title>
    <link href="https://owenyang0.github.io/2015/05/08/2-minute-introduction-to-Rx/"/>
    <id>https://owenyang0.github.io/2015/05/08/2-minute-introduction-to-Rx/</id>
    <published>2015-05-08T11:59:09.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>可能在之前，你就已经看过这篇<a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">响应式编程的入门</a>。什么？太长？好吧，这都没关系，<a href="https://github.com/Reactive-Extensions/RxJS">Rx</a>并不难，你甚至可以自己实现一个这样的框架。<br>知道数组吧？你当然知道，这就是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 14, 9, 5, 2, 10, 13, 4 ]</span><br></pre></td></tr></table></figure></p><p>如果说这是一个<strong>非可变数组</strong>，但需要移除所有的奇数，你会怎样做呢？可能会是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">14</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">4</span> ]</span><br><span class="line"></span><br><span class="line"><span class="title function_">filter</span>( (x) -&gt; x % <span class="number">2</span> == <span class="number">0</span> )</span><br><span class="line"><span class="comment">// =&gt; [ 14, 2, 10, 4 ]</span></span><br></pre></td></tr></table></figure><p>直到现在也没什么新鲜东西，这在<code>underscore.js</code>, <code>ECMAScript 5.1</code>, <code>LINQ</code>, <code>Guava</code>, 等等之中，早已司空见惯。这些都是来自于函数式的编程范型。</p><hr><p>再来想想带来坐标位置数据的点击事件。如果画一条时间线，它们看起来应该是这样。<br><img src="/images/click-events.png" alt="click events line"></p><p>是的，这是一个事件流，它有一妮称，叫 “Observable”。</p><p>这些点击事件，都来自于鼠标，意味着整个事件流都是<strong>不可变的</strong>。事件被触发后，我们没有办法对事件进行添加或删除。<br>但我如果只是关心<code>x &lt; 250</code>的事件呢？能不能创建一个像数组一样的新的流，再对其进行过滤呢？<br><img src="/images/click-events.png" alt="click events line"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">filter</span>( (event) -&gt; event.<span class="property">x</span> &lt; <span class="number">250</span> )</span><br></pre></td></tr></table></figure><p><img src="/images/click-events-filtered.png" alt="click events filted line"></p><p>非可变数组和Observables有什么区别呢？其实不多，两个都可以使用<code>map</code>, <code>filter</code>, <code>reduce</code>等高阶函数。在Observables中，你也可以使用<code>merge</code>, <code>delay</code>, <code>concat</code>, <code>buffer</code>, <code>distinct</code>, <code>first</code>, <code>last</code>, <code>zip</code>, <code>startWith</code>, <code>window</code>, <code>takeUntil</code>, <code>skip</code>, <code>scan</code>, <code>sample</code>, <code>amb</code>, <code>n</code>, <code>flatMap</code>等函数。</p><p><strong>想像一下异步的非可变数组</strong><br><code>Rx</code>可以说是操作事件的<code>underscore.js</code>。但，等一下，什么是事件？在你的程序中，难道不是绝大多数代码都是事件吗？<br>程序启动事件，API响应事件，键盘事件，设备休眠事件等等。</p><p>基本上，所有东西都可以是事件流。所需要的只是要适当地进行排列组合。</p><p>这就是<code>Rx</code>的两分钟。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可能在之前，你就已经看过这篇&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;响应式编程的入门&lt;/a&gt;。什么？太长？好吧，这都没关系，&lt;a href=&quot;https://github.com/React
      
    
    </summary>
    
    
      <category term="Rx" scheme="https://owenyang0.github.io/tags/Rx/"/>
    
      <category term="RxJS" scheme="https://owenyang0.github.io/tags/RxJS/"/>
    
      <category term="Reactive Programming" scheme="https://owenyang0.github.io/tags/Reactive-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming in JavaScript</title>
    <link href="https://owenyang0.github.io/2015/04/12/functional-programming-in-javascript/"/>
    <id>https://owenyang0.github.io/2015/04/12/functional-programming-in-javascript/</id>
    <published>2015-04-12T00:09:44.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda</h2><ul><li>What is Functional Programming?</li><li>How Functional Programming Differs From Other Paradigms</li><li>Functional Programming in Javascript</li><li>Advantages and Disadvantages of Functional Style</li><li>Interaction of Functional and Object-Oriented Styles</li></ul><hr><h2 id="What-is-Functional-Programming"><a href="#What-is-Functional-Programming" class="headerlink" title="What is Functional Programming?"></a>What is Functional Programming?</h2><ul><li><strong>Restricted sense,</strong> FP means programming without mutable variables, assignments, loops and other imperative control structures</li><li><strong>Wider sense,</strong> FP means focusing on the functions</li><li><strong>Particularly,</strong> functions can be values that are produced, consumed, and composed.</li></ul><hr><h2 id="Functional-Programming-Languages"><a href="#Functional-Programming-Languages" class="headerlink" title="Functional Programming Languages"></a>Functional Programming Languages</h2><p>Functions in a FP languages are first-class citizens. This means:</p><ul><li>they can be defined anywhere, including inside other function</li><li>like any other values, they can be passed as parameters to functions and returned as results</li><li>as for other values, there exist a set of operators to compose functions</li></ul><hr><h2 id="Some-languages"><a href="#Some-languages" class="headerlink" title="Some languages"></a>Some languages</h2><p><strong>Restricted sense:</strong></p><ul><li>Pure Lisp, XSLT, XPath, XQuery, FP</li></ul><p><strong>Wider sense:</strong></p><ul><li>JavaScript</li><li>Lisp, Scheme, Racket, Clojure</li><li>SML, F#</li><li>Haskell (full language)</li><li>Scala</li></ul><hr><h2 id="OOP-vs-FP"><a href="#OOP-vs-FP" class="headerlink" title="OOP vs FP"></a>OOP vs FP</h2><p>OO focuses on the differences in the data, while FP concentrates on consistent data structures.</p><hr><h3 id="Object-Oriented"><a href="#Object-Oriented" class="headerlink" title="Object-Oriented"></a>Object-Oriented</h3><ul><li>Data and the operations upon it are tightly coupled</li><li>Objects hide their implementation of operations from other objects via their interfaces</li><li>The central model for abstraction is the data itself</li><li>The central activity is composing new objects and extending existing objects by adding new methods to them</li></ul><hr><h3 id="Functional"><a href="#Functional" class="headerlink" title="Functional"></a>Functional</h3><ul><li>Data is only loosely coupled to functions</li><li>Functions hide their implementation, and the language’s abstractions speak to functions and the way they are combined or expressed</li><li>The central model for abstraction is the function, not the data structure.<br>The central activity is writing new functions</li></ul><hr><h2 id="Declarative-vs-Imperative"><a href="#Declarative-vs-Imperative" class="headerlink" title="Declarative vs Imperative"></a>Declarative vs Imperative</h2><p>One main distinguishing characteristics of functional programming languages is that they describe what they want done, and not how to do it. OO, inside its methods, still uses mostly imperative techniques.</p><hr><h3 id="Imperative-programming-is-about"><a href="#Imperative-programming-is-about" class="headerlink" title="Imperative programming is about"></a>Imperative programming is about</h3><ul><li>modifying mutable variables</li><li>using assignment</li><li>and control structures such as if-then-else, loops, break, continue, return.</li></ul><hr><p>The most common informal way to understand imperative programs is as instruction sequences for a Von Neumann computer</p><p>Processor <---- bus ----> Memory</p><hr><h3 id="Declarative-programming-is-about"><a href="#Declarative-programming-is-about" class="headerlink" title="Declarative programming is about"></a>Declarative programming is about</h3><ul><li>concentrate on functions</li><li>avoid mutations (mutation can bestroy useful laws)</li><li>have powerful ways to abstract and compose functions</li></ul><hr><h3 id="Imperative-style"><a href="#Imperative-style" class="headerlink" title="Imperative style"></a>Imperative style</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var sumOfSquares = function(list) &#123;</span><br><span class="line">    var result = 0;</span><br><span class="line">    for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">        result += square(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(sumOfSquares([2, 3, 5]));</span><br></pre></td></tr></table></figure><h3 id="Functional-style"><a href="#Functional-style" class="headerlink" title="Functional style"></a>Functional style</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sumOfSquares = <span class="title function_">pipe</span>(<span class="title function_">map</span>(square), <span class="title function_">reduce</span>(add, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sumOfSquares</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]));</span><br></pre></td></tr></table></figure><hr><h2 id="Functional-Features-in-JavaScript"><a href="#Functional-Features-in-JavaScript" class="headerlink" title="Functional Features in JavaScript"></a>Functional Features in JavaScript</h2><h3 id="Easily-available-in-Javascript"><a href="#Easily-available-in-Javascript" class="headerlink" title="Easily available in Javascript"></a>Easily available in Javascript</h3><ul><li>First-class functions</li><li>Lambdas/Anonymous Functions with closures</li><li>Compact, even terse, functions</li></ul><h3 id="Possible-to-accomplish-in-JavaScript"><a href="#Possible-to-accomplish-in-JavaScript" class="headerlink" title="Possible to accomplish in JavaScript"></a>Possible to accomplish in JavaScript</h3><ul><li>Mostly stateless processing</li><li>Side-effect-free functions calls</li></ul><hr><h3 id="Not-available-in-JavaScript"><a href="#Not-available-in-JavaScript" class="headerlink" title="Not available in JavaScript"></a>Not available in JavaScript</h3><ul><li>Performant recursion through tail call optimization</li><li>Pattern matching (Haskell, Erlang)</li><li>Lazy Evaluation (Miranda, Haskell)</li><li>Homoiconicity (mostly LISP-like languages?)</li></ul><hr><h3 id="Shared-examples"><a href="#Shared-examples" class="headerlink" title="Shared examples"></a>Shared examples</h3><p>This calculates the odds of choosing the correct <code>n</code> numbers out of the <code>p</code> possibilities.</p><h3 id="iterative-version"><a href="#iterative-version" class="headerlink" title="iterative version"></a>iterative version</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">odds</span>(<span class="params">n, p</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> acc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        acc *= (n - i) / (p - i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">odds</span>(<span class="number">3</span>, <span class="number">10</span>)); <span class="comment">//=&gt; (3/10) * (2/9) * (1/8) =&gt; (1/120) =&gt; 0.008333...</span></span><br></pre></td></tr></table></figure><hr><h3 id="Recursive-version"><a href="#Recursive-version" class="headerlink" title="Recursive version"></a>Recursive version</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Recursive version</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">odds</span>(<span class="params">n, p</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (n == <span class="number">0</span>) ? <span class="number">1</span> : (n / p) * <span class="title function_">odds</span>(n - <span class="number">1</span>, p - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">odds</span>(<span class="number">3</span>, <span class="number">10</span>)); <span class="comment">//=&gt; (3/10) * (2/9) * (1/8) =&gt; (1/120) =&gt; 0.008333...</span></span><br></pre></td></tr></table></figure><ul><li>recursive functions are often much more elegant than their iterative cousins.</li><li>Unfortunately, they often don’t perform as well. All the overhead of creating stack contexts for function calls tends to add up. But certain kinds of recursive calls can be easily optimized.</li></ul><hr><h3 id="tail-recursive"><a href="#tail-recursive" class="headerlink" title="tail recursive"></a>tail recursive</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var odds = (function()&#123;</span><br><span class="line">    var odds1 = function(n, p, acc) &#123;</span><br><span class="line">        return (n == 0) ? acc : odds1(n - 1, p - 1, (n / p) * acc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return function(n, p) &#123;</span><br><span class="line">        return odds1(n, p, 1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>Note that the recursive call in <strong>odds1</strong> is the last statement in its branch of the function. If this is true for all recursive calls, then the function is <strong>tail-recursive</strong>, and the compiler can replace the entire set of nested calls with simple <strong>JUMP</strong> operations.</p><hr><h2 id="Functional-Programming-in-Javascript"><a href="#Functional-Programming-in-Javascript" class="headerlink" title="Functional Programming in Javascript"></a>Functional Programming in Javascript</h2><p>With first-class function, closures, and anonymous functions, Javascript allows us to do a great deal of functional programming, even if we don’t have things like pattern matching and homoiconicity.</p><p>There are some tools built in to modern Javascript environments, and it’s straightforward to roll your own.</p><ul><li>Ramda</li><li>Underscore, Lo-Dash</li></ul><hr><h2 id="Using-Functional-Techniques-in-JavaScript"><a href="#Using-Functional-Techniques-in-JavaScript" class="headerlink" title="Using Functional Techniques in JavaScript"></a>Using Functional Techniques in JavaScript</h2><p>Example will be a Task List application, fetching something like the following data from the server:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    <span class="attr">result</span>: <span class="string">&quot;SUCCESS&quot;</span>,</span><br><span class="line">    <span class="attr">interfaceVersion</span>: <span class="string">&quot;1.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">requested</span>: <span class="string">&quot;10/17/2013 15:31:20&quot;</span>.</span><br><span class="line">    <span class="attr">lastUpdated</span>: <span class="string">&quot;10/16/2013 10:52:39&quot;</span>,</span><br><span class="line">    <span class="attr">tasks</span>: [</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">104</span>, <span class="attr">complete</span>: <span class="literal">false</span>,            <span class="attr">priority</span>: <span class="string">&quot;high&quot;</span>,</span><br><span class="line">                  <span class="attr">dueDate</span>: <span class="string">&quot;11/29/2013&quot;</span>,      <span class="attr">member</span>: <span class="string">&quot;Scott&quot;</span>,</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&quot;Do something&quot;</span>,      <span class="attr">created</span>: <span class="string">&quot;9/22/2013&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">105</span>, <span class="attr">complete</span>: <span class="literal">false</span>,            <span class="attr">priority</span>: <span class="string">&quot;medium&quot;</span>,</span><br><span class="line">                  <span class="attr">dueDate</span>: <span class="string">&quot;11/22/2013&quot;</span>,      <span class="attr">member</span>: <span class="string">&quot;Lena&quot;</span>,</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&quot;Do something else&quot;</span>, <span class="attr">created</span>: <span class="string">&quot;9/22/2013&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">107</span>, <span class="attr">complete</span>: <span class="literal">true</span>,             <span class="attr">priority</span>: <span class="string">&quot;high&quot;</span>,</span><br><span class="line">                  <span class="attr">dueDate</span>: <span class="string">&quot;11/22/2013&quot;</span>,      <span class="attr">member</span>: <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&quot;Fix the foo&quot;</span>,       <span class="attr">created</span>: <span class="string">&quot;9/22/2013&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">108</span>, <span class="attr">complete</span>: <span class="literal">false</span>,            <span class="attr">priority</span>: <span class="string">&quot;low&quot;</span>,</span><br><span class="line">                  <span class="attr">dueDate</span>: <span class="string">&quot;11/15/2013&quot;</span>,      <span class="attr">member</span>: <span class="string">&quot;Punam&quot;</span>,</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&quot;Adjust the bar&quot;</span>,    <span class="attr">created</span>: <span class="string">&quot;9/25/2013&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">110</span>, <span class="attr">complete</span>: <span class="literal">false</span>,            <span class="attr">priority</span>: <span class="string">&quot;medium&quot;</span>,</span><br><span class="line">                  <span class="attr">dueDate</span>: <span class="string">&quot;11/15/2013&quot;</span>,      <span class="attr">member</span>: <span class="string">&quot;Scott&quot;</span>,</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&quot;Rename everything&quot;</span>, <span class="attr">created</span>: <span class="string">&quot;10/2/2013&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">112</span>, <span class="attr">complete</span>: <span class="literal">true</span>,             <span class="attr">priority</span>: <span class="string">&quot;high&quot;</span>,</span><br><span class="line">                  <span class="attr">dueDate</span>: <span class="string">&quot;11/27/2013&quot;</span>,      <span class="attr">member</span>: <span class="string">&quot;Lena&quot;</span>,</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&quot;Alter all quuxes&quot;</span>,  <span class="attr">created</span>: <span class="string">&quot;10/5/2013&quot;</span>&#125;</span><br><span class="line">        <span class="comment">// , ...</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tasks: [</span><br><span class="line">        &#123;id: 104, complete: false,            priority: &quot;high&quot;,</span><br><span class="line">                  dueDate: &quot;11/29/2013&quot;,      member: &quot;Scott&quot;,</span><br><span class="line">                  title: &quot;Do something&quot;,      created: &quot;9/22/2013&quot;&#125;,</span><br><span class="line">        &#123;id: 105, complete: false,            priority: &quot;medium&quot;,</span><br><span class="line">                  dueDate: &quot;11/22/2013&quot;,      member: &quot;Lena&quot;,</span><br><span class="line">                  title: &quot;Do something else&quot;, created: &quot;9/22/2013&quot;&#125;,</span><br><span class="line">    // , ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The goal will be a function that accepts a <code>member</code> parameter, then fetches the data from the server (or from some application cache), chooses the tasks for that member that are not complete, returns their ids, priorities, titles, and dues dates, sorted by due date.</p><ul><li>asynchronous, we’ll hook everything together with promises.</li><li>ignore all error-checking</li></ul><hr><h2 id="Imperative-Approach"><a href="#Imperative-Approach" class="headerlink" title="Imperative Approach"></a>Imperative Approach</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getIncompleteTaskSummariesForMember_imperative = <span class="keyword">function</span>(<span class="params">memberName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetchData</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data.<span class="property">tasks</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> results = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tasks[i].<span class="property">member</span> == memberName) &#123;</span><br><span class="line">                    results.<span class="title function_">push</span>(tasks[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> results = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tasks[i].<span class="property">complete</span>) &#123;</span><br><span class="line">                    results.<span class="title function_">push</span>(tasks[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> results = [], task;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">                task = tasks[i];</span><br><span class="line">                results.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    <span class="attr">id</span>: task.<span class="property">id</span>,</span><br><span class="line">                    <span class="attr">dueDate</span>: task.<span class="property">dueDate</span>,</span><br><span class="line">                    <span class="attr">title</span>: task.<span class="property">title</span>,</span><br><span class="line">                    <span class="attr">priority</span>: task.<span class="property">priority</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">            tasks.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">first, second</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> first.<span class="property">dueDate</span> - second.<span class="property">dueDate</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> tasks;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Object-Oriented-Approach"><a href="#Object-Oriented-Approach" class="headerlink" title="Object-Oriented Approach"></a>Object-Oriented Approach</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main method</span></span><br><span class="line"><span class="keyword">var</span> getIncompleteTaskSummariesForMember_objectOriented = <span class="keyword">function</span>(<span class="params">memberName</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">fetchData</span>()</span><br><span class="line">       .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> taskList = <span class="keyword">new</span> <span class="title class_">TaskList</span>(data.<span class="property">tasks</span>);</span><br><span class="line">           taskList.<span class="title function_">chooseByMember</span>(memberName);</span><br><span class="line">           taskList.<span class="title function_">chooseByCompletion</span>(<span class="literal">false</span>);</span><br><span class="line">           <span class="keyword">var</span> newTaskList = taskList.<span class="title function_">getSummaries</span>();</span><br><span class="line">           newTaskList.<span class="title function_">sort</span>(<span class="keyword">new</span> <span class="title class_">TaskListSorter</span>(<span class="string">&quot;dueDate&quot;</span>));</span><br><span class="line">           <span class="keyword">return</span> newTaskList.<span class="property">tasks</span>;</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var TaskList = (function() &#123;</span><br><span class="line">    var TaskList = function(/*Task[]*/ tasks) &#123;</span><br><span class="line">        this.tasks = tasks;</span><br><span class="line">    &#125;;</span><br><span class="line">    TaskList.prototype.chooseByMember = function(memberName) &#123;</span><br><span class="line">        var results = [];</span><br><span class="line">        for (var i = 0, len = this.tasks.length; i &lt; len; i++) &#123;</span><br><span class="line">            if (this.tasks[i].member === memberName) &#123;</span><br><span class="line">                results.push(this.tasks[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.tasks = results;</span><br><span class="line">    &#125;;</span><br><span class="line">    TaskList.prototype.chooseByCompletion = function(completion) &#123;</span><br><span class="line">        var results = [];</span><br><span class="line">        for (var i = 0, len = this.tasks.length; i &lt; len; i++) &#123;</span><br><span class="line">            if (this.tasks[i].complete == completion) &#123;</span><br><span class="line">                results.push(this.tasks[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.tasks = results;</span><br><span class="line">    &#125;;</span><br><span class="line">    TaskList.prototype.getSummaries = function() &#123;</span><br><span class="line">            var results = [], task;</span><br><span class="line">            for (var i = 0, len = this.tasks.length; i &lt; len; i++) &#123;</span><br><span class="line">                task = this.tasks[i];</span><br><span class="line">                results.push(&#123;</span><br><span class="line">                    id: task.id,</span><br><span class="line">                    dueDate: task.dueDate,</span><br><span class="line">                    title: task.title,</span><br><span class="line">                    priority: task.priority</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            return new TaskList(results);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        TaskList.prototype.sort = function(/*TaskListSorter*/ sorter) &#123;</span><br><span class="line">            this.tasks.sort(sorter.getSortFunction());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return TaskList;</span><br><span class="line">    &#125;());</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var TaskListSorter = (function()  &#123;</span><br><span class="line">    var TaskListSorter = function(propName) &#123;</span><br><span class="line">        this.propName = propName;</span><br><span class="line">    &#125;;</span><br><span class="line">    TaskListSorter.prototype.getSortFunction = function() &#123;</span><br><span class="line">        var propName = this.propName;</span><br><span class="line">        return function(first, second) &#123;</span><br><span class="line">            return first[propName] &lt; second[propName] ? -1 :</span><br><span class="line">                   first[propName] &gt; second[propName] ? +1 : 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return TaskListSorter;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>The contents of the functions are much the same; it’s the way they are organized that varies.</p><hr><h2 id="Converting-to-Functional-Code"><a href="#Converting-to-Functional-Code" class="headerlink" title="Converting to Functional Code"></a>Converting to Functional Code</h2><p>The process for the remainder of this talk will be to convert this code into concise, readable, functional code, one block at a time, explaining some of the basic building blocks of functional programming as we go. First up is this little function:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="property">tasks</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>Functional version<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="title function_">prop</span>(<span class="string">&#x27;tasks&#x27;</span>))</span><br></pre></td></tr></table></figure></p><p>So the obvious question, then, is, what is the <strong>prop</strong> function?</p><hr><h2 id="The-prop-function"><a href="#The-prop-function" class="headerlink" title="The prop function"></a>The prop function</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">_curry2</span>(<span class="keyword">function</span> <span class="title function_">prop</span>(<span class="params">p, obj</span>) &#123; <span class="keyword">return</span> obj[p]; &#125;);</span><br></pre></td></tr></table></figure><p>Our <strong>then</strong> call needs a function, so <strong>curry</strong> must be doing something interesting with this function, which should return an object propery, to instead returning a new function. So we need to take a detour to discuss <strong>curry</strong> a bit.</p><hr><h2 id="Currying-Functions"><a href="#Currying-Functions" class="headerlink" title="Currying Functions"></a>Currying Functions</h2><p>Currying is the process of converting functions that take multiple arguments into ones that, when supplied fewer arguments, return new functions that accept the remaining ones.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addFourNumbers = <span class="keyword">function</span>(<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curriedAddFourNumbers = R.<span class="title function_">curry</span>(addFourNumbers);</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">curriedAddFourNumbers</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">f</span>(<span class="number">3</span>);</span><br><span class="line"><span class="title function_">g</span>(<span class="number">4</span>); <span class="comment">//=&gt; 10</span></span><br></pre></td></tr></table></figure><hr><h2 id="Back-to-get"><a href="#Back-to-get" class="headerlink" title="Back to get"></a>Back to get</h2><p>Now that we understand curry, we can see that a manually curried version of this function might look like this:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prop = <span class="keyword">function</span>(<span class="params">prop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[prop];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>And that means that our new <strong>get(‘tasks’)</strong> is equivalent to<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[<span class="string">&#x27;tasks&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tasks[i].<span class="property">member</span> == memberName) &#123;</span><br><span class="line">            results.<span class="title function_">push</span>(tasks[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>Functional version<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">task</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> task.<span class="property">member</span> == memberName;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>But we’ve done something more important too: We’ve moved the focus from iteration and updating the state of a local collection to the real point of this block: choosing the tasks with the proper member property.</p><p>One of the most important features of functional programming is that it makes it easy to shift focus in this manner.</p><hr><h2 id="Rejecting-elements"><a href="#Rejecting-elements" class="headerlink" title="Rejecting elements"></a>Rejecting elements</h2><p>The next block is similar, except that instead of using filter, we will use reject, which behaves exactly the same except that it chooses those members of the list that don’t match the predicate. We replace this code:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!tasks[i].<span class="property">complete</span>) &#123;</span><br><span class="line">            results.<span class="title function_">push</span>(tasks[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>with this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="title function_">reject</span>(<span class="keyword">function</span>(<span class="params">task</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> task.<span class="property">complete</span> === <span class="literal">true</span>;</span><br><span class="line">)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h2><p>A reasonable question would be why with didn’t do this instead, which would work equally well:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.then(filter(function(task) &#123;</span><br><span class="line">    return task.complete !== true;</span><br><span class="line">))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The reason is that the similarity between these two blocks will offer us a chance to refactor our code into something still more descriptive:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(task) &#123;</span><br><span class="line">    return task.member == memberName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(task) &#123;</span><br><span class="line">    return task.complete === true;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Both of these functions accept an object and return a boolean that describes whether a particular property of the object has a given value. Perhaps a good name for a function that generates such functions would be <strong>propEq</strong>.</p><hr><h2 id="Implementing-propEq"><a href="#Implementing-propEq" class="headerlink" title="Implementing propEq"></a>Implementing propEq</h2><p>Simplest Approach<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propEq = <span class="keyword">function</span>(<span class="params">prop, val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[prop] === val;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>This works, and we could leave it there, but we’re going to take another detour into a popular style of functional programming known as <strong>points-free</strong> coding.</p><hr><h2 id="Points-free-definitions"><a href="#Points-free-definitions" class="headerlink" title="Points-free definitions"></a>Points-free definitions</h2><p>With the functions <strong>add</strong> (which adds two numbers) and <strong>reduce</strong> (which runs the supplied function against an accumulator and each element of the list, feeding the result of each call into the next one and returning the final result), we can easily define a <strong>sum</strong> function like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reduce</span>(add, <span class="number">0</span>, list);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Because of the automatic currying, though, the following is entirely equivalent:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="title function_">reduce</span>(add, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>This is the <strong>points-free</strong> style, defining functions without ever making direct reference to their arguments.</p><hr><p><strong>Wikipedia</strong></p><blockquote></blockquote><p>Tacit [point-free] programming is a programming paradigm in which a function definition does not include information regarding its arguments, using combinators and function composition (but not ?-abstraction) instead of variables.</p><p>There are plenty of reasons to like it, but the most important one might just be the simplicity. There is a great deal to be said for elegant, readable code.</p><hr><h2 id="A-points-free-version-of-propEq"><a href="#A-points-free-version-of-propEq" class="headerlink" title="A points-free version of propEq"></a>A points-free version of propEq</h2><p>Can we redefine the following in a points-free style?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propEq = <span class="keyword">function</span>(<span class="params">prop, val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[prop] === val;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Here’s a version that is closer to points-free, removing the direct reference to obj:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propEq = <span class="keyword">function</span>(<span class="params">prop, val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compose</span>(<span class="title function_">eq</span>(val), <span class="title function_">get</span>(prop));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>Huh? What? <strong>compose</strong>? <strong>eq</strong>?</p><p><strong>eq</strong> is easy: like all good functions of multiple parameters, it’s curried, and it simply reports whether its two arguments are equal. So <strong>eq(val)</strong> is a function which reports whether its parameter has the same value as does <strong>val</strong>. But now we need to discuss <strong>compose</strong>.</p><hr><h2 id="Functional-composition"><a href="#Functional-composition" class="headerlink" title="Functional composition"></a>Functional composition</h2><p>In mathematics <strong>f ∘ g</strong> (pronounced “f composed with g”) is the function that given <strong>x</strong>, returns <strong>f(g(x))</strong>.</p><p>So if we follow the mathematical model <strong>compose(add1, square)(x)</strong> should equal <strong>add1(square(x))</strong>.</p><p>Simplest Implementation</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="keyword">function</span>(<span class="params">f, g</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Note that <strong>Ramda</strong> also defines <strong>pipe</strong>, which does much the same thing, but runs the functions in the opposite order. So <strong>pipe(add1, square)(x)</strong> equals <strong>square(add1(x))</strong>. Both styles have their uses.</p><hr><h2 id="Back-to-propEq"><a href="#Back-to-propEq" class="headerlink" title="Back to propEq"></a>Back to propEq</h2><p>So now this definition makes sense:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propEq = <span class="keyword">function</span>(<span class="params">prop, val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">pipe</span>(<span class="title function_">get</span>(prop), <span class="title function_">eq</span>(val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note the switch from <strong>compose</strong> to <strong>pipe</strong>.</p><p>This gives us a further way to clean it up, and make it entirely <strong>points-free</strong>, using a useful feature of Ramda we haven’t seen implemented in other libraries, which we call (for now) <strong>callWith</strong>. Used like <strong>callWith(fn, transformer1, … transformerN)</strong>, this returns a function which accepts N parameters, feeds them to the respective transformers, and then calls <strong>fn</strong> using the results of all these. This gives us the final version of propEq:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propEq = <span class="title function_">callWith</span>(pipe, get, eq);</span><br></pre></td></tr></table></figure><hr><h2 id="Definition-of-propEq"><a href="#Definition-of-propEq" class="headerlink" title="Definition of propEq"></a>Definition of propEq</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = _curry3(function propEq(name, val, obj) &#123;</span><br><span class="line">  return _eq(obj[name], val);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="Using-our-new-function"><a href="#Using-our-new-function" class="headerlink" title="Using our new function"></a>Using our new function</h2><p>Still, all these explanations aside, it was only a minute or two of work to do this refactoring and arrive at a fairly simple version of <strong>propEq</strong>. We would plug it back in like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propEq = <span class="title function_">callWith</span>(pipe, get, eq);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">.<span class="title function_">then</span>(<span class="title function_">filter</span>(<span class="title function_">propEq</span>(<span class="string">&#x27;member&#x27;</span>, memberName)))</span><br><span class="line">.<span class="title function_">then</span>(<span class="title function_">reject</span>(<span class="title function_">propEq</span>(<span class="string">&#x27;complete&#x27;</span>, <span class="literal">true</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="New-objects-from-old"><a href="#New-objects-from-old" class="headerlink" title="New objects from old"></a>New objects from old</h2><p>The next block we wanted to update looked like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> results = [], task;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        task = tasks[i];</span><br><span class="line">        results.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">id</span>: task.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">dueDate</span>: task.<span class="property">dueDate</span>,</span><br><span class="line">            <span class="attr">title</span>: task.<span class="property">title</span>,</span><br><span class="line">            <span class="attr">priority</span>: task.<span class="property">priority</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Functional version:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="title function_">map</span>(<span class="title function_">pick</span>([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;dueDate&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>])))</span><br></pre></td></tr></table></figure><p>You’re a smart bunch, right? I probably don’t even have to explain what pick does, right?</p><hr><h2 id="The-map-function"><a href="#The-map-function" class="headerlink" title="The map function"></a>The <strong>map</strong> function</h2><p>One of the most fundamental functions used in FP is <strong>map</strong>, which is used to convert one list into a related one by running the same function against each member.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fiveSquares = <span class="title function_">map</span>(square, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// =&gt; [1, 4, 9, 16, 25];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shouts = <span class="title function_">map</span>(toUpperCase, [<span class="string">&quot;oy&quot;</span>, <span class="string">&quot;vey&quot;</span>]); <span class="comment">//=&gt; [&quot;OY&quot;, &quot;VEY&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>There isn’t much more to say about <strong>map</strong>, but it’s important to point out that this function and <strong>reduce</strong>, which we mentioned briefly earlier, are among the most important functional programming tools around.</p><hr><h2 id="Partial-clones-of-our-objects"><a href="#Partial-clones-of-our-objects" class="headerlink" title="Partial clones of our objects"></a>Partial clones of our objects</h2><p>We used map like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="title function_">map</span>(<span class="title function_">pick</span>([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;dueDate&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>])))</span><br></pre></td></tr></table></figure><p>The magic of currying is again at work here:</p><ul><li><strong>pick</strong> accepts a list of properties and an object and return a partial clone, copying those properties from the original. Since we just pass in the properties, this curried function returns a new function that accepts an object and returns that partial clone.</li><li><strong>map</strong> accepts a function and a list an applies the function to the list. But because it’s curried, and because we supply only the function generated by the curried pick, this one also returns a new function which will accept a list and create these partial clones of each element in the list.</li><li>This function is passed to <strong>then</strong>, which will simply pass along its parameter (whenever that becomes ready) to our function and “return” the result of running our function against it. (We simply know because of the way prior calls have been built that this will be a list of tasks.)</li></ul><hr><h2 id="A-final-task-of-some-sort"><a href="#A-final-task-of-some-sort" class="headerlink" title="A final task of some sort"></a>A final task of some sort</h2><p>The last segment we wanted to convert looked like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.then(function(tasks) &#123;</span><br><span class="line">    tasks.sort(function(first, second) &#123;</span><br><span class="line">        return first.dueDate - second.dueDate;</span><br><span class="line">    &#125;);</span><br><span class="line">    return tasks;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Sorts the list according to a key generated by the supplied function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortByFirstItem = R.<span class="title function_">sortBy</span>(<span class="title function_">prop</span>(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">var</span> pairs = [[-<span class="number">1</span>, <span class="number">1</span>], [-<span class="number">2</span>, <span class="number">2</span>], [-<span class="number">3</span>, <span class="number">3</span>]];</span><br><span class="line"><span class="title function_">sortByFirstItem</span>(pairs); <span class="comment">//=&gt; [[-3, 3], [-2, 2], [-1, 1]]</span></span><br></pre></td></tr></table></figure><hr><h2 id="Again-with-the-curry"><a href="#Again-with-the-curry" class="headerlink" title="Again with the curry"></a>Again with the curry</h2><p>Again, we take advantage of the fact that our important functions are curried, and use <strong>prop(‘dueDate’)</strong>. This creates a function that, fed one of our task objects, returns its due date. We can feed this into <strong>sortBy</strong> to get the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.then(sortBy(prop(&#x27;dueDate&#x27;)))</span><br></pre></td></tr></table></figure><hr><p>While this is not a lot less code than the original:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">    tasks.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">first, second</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> first.<span class="property">dueDate</span> - second.<span class="property">dueDate</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>it clearly is a savings. However, much more importantly, the code is all clearly aimed at our problem.</p><hr><h2 id="Recap-–-Imperative"><a href="#Recap-–-Imperative" class="headerlink" title="Recap – Imperative"></a>Recap – Imperative</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getIncompleteTaskSummariesForMember_imperative = <span class="keyword">function</span>(<span class="params">memberName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetchData</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data.<span class="property">tasks</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> results = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tasks[i].<span class="property">member</span> == memberName) &#123;</span><br><span class="line">                    results.<span class="title function_">push</span>(tasks[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> results = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tasks[i].<span class="property">complete</span>) &#123;</span><br><span class="line">                    results.<span class="title function_">push</span>(tasks[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> results = [], task;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tasks.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">                task = tasks[i];</span><br><span class="line">                results.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    <span class="attr">id</span>: task.<span class="property">id</span>,</span><br><span class="line">                    <span class="attr">dueDate</span>: task.<span class="property">dueDate</span>,</span><br><span class="line">                    <span class="attr">title</span>: task.<span class="property">title</span>,</span><br><span class="line">                    <span class="attr">priority</span>: task.<span class="property">priority</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">tasks</span>) &#123;</span><br><span class="line">            tasks.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">first, second</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> first.<span class="property">dueDate</span> - second.<span class="property">dueDate</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> tasks;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Recap-–-Functional"><a href="#Recap-–-Functional" class="headerlink" title="Recap – Functional"></a>Recap – Functional</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getIncompleteTaskSummariesForMemberFunctional = <span class="keyword">function</span>(<span class="params">memberName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetchData</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="title function_">get</span>(<span class="string">&#x27;tasks&#x27;</span>))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="title function_">filter</span>(<span class="title function_">propEq</span>(<span class="string">&#x27;member&#x27;</span>, memberName)))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="title function_">reject</span>(<span class="title function_">propEq</span>(<span class="string">&#x27;complete&#x27;</span>, <span class="literal">true</span>)))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="title function_">map</span>(<span class="title function_">pick</span>([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;dueDate&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>])))</span><br><span class="line">        .<span class="title function_">then</span>(<span class="title function_">sortBy</span>(<span class="title function_">get</span>(<span class="string">&#x27;dueDate&#x27;</span>)));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Most-Important-Functions"><a href="#Most-Important-Functions" class="headerlink" title="Most Important Functions"></a>Most Important Functions</h2><p>We’ve seen what are probably the most important functions in functional programming:</p><ul><li>map</li><li>reduce</li><li>filter</li><li>compose</li><li>curry</li></ul><p>There’s one that to some might be conspicuous by it’s absence:</p><ul><li>forEach<br>Maybe it is not actually appropriate to functional programming, as its main purpose is to help you achieve side-effects. But many libraries do include one.</li></ul><hr><h3 id="What-We-Gain-from-FP-Style"><a href="#What-We-Gain-from-FP-Style" class="headerlink" title="What We Gain from FP Style"></a>What We Gain from FP Style</h3><ul><li>Elegance and simplicity</li><li>Easier decomposition of problems</li><li>Code more closely tied to the problem domain</li></ul><p><strong>And through these, we can also achieve</strong></p><ul><li>Straightforward unit testing</li><li>Easier debugging</li><li>Simple concurrency</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Agenda&quot;&gt;&lt;a href=&quot;#Agenda&quot; class=&quot;headerlink&quot; title=&quot;Agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;What is Functional Programming?&lt;/li&gt;
&lt;li&gt;How Fun
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="FP" scheme="https://owenyang0.github.io/tags/FP/"/>
    
      <category term="Functional Programming" scheme="https://owenyang0.github.io/tags/Functional-Programming/"/>
    
      <category term="Ramda" scheme="https://owenyang0.github.io/tags/Ramda/"/>
    
  </entry>
  
  <entry>
    <title>修复AWS上EC2损坏的sshd_config文件</title>
    <link href="https://owenyang0.github.io/2015/03/16/%E4%BF%AE%E5%A4%8DAWS%E4%B8%8AEC2%E6%8D%9F%E5%9D%8F%E7%9A%84sshd-config%E6%96%87%E4%BB%B6/"/>
    <id>https://owenyang0.github.io/2015/03/16/修复AWS上EC2损坏的sshd-config文件/</id>
    <published>2015-03-16T20:11:09.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p><strong>常识：</strong> AWS是没有root用户的，登陆也都是通过SSH KEY完成授权认证。</p><p><strong>背景：</strong> 正在AWS上搭一个<code>CI</code> (GO)，与<code>gitlab</code>，为了将其进行集成，需将gitlab的deploy key设置成GO的SSH KEY。然而，GO创建的是无密码的用户go，导致无法进入用户go的home目录。<br>正常 <code>su go</code> 无法切换到go用户，当时又恰巧正在看SSH的config文件：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><br>里面有一条 <code>PermitEmptyPasswords no</code>，接着便私自改成了<code>yes</code>，无用。<code>PermitRootLogin no</code>，改成 <code>yes</code>，依旧无用。<br><strong>注：</strong>废话，肯定没用啊，这是设置SSH的。</p><p>正确的做法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su go</span><br></pre></td></tr></table></figure></p><p>当修改之后，没改回来，当我退出AWS之后就杯具了。再也登陆到AWS上，因为登陆时却输密码，而实际却是没有密码。此时真想多天说一句：X。</p><p>Google了很多解决方案，都说得是用Live CD，重新引导进入，然后挂载有sshd_config文件的磁盘并修复它。这在EC2上是根本不可能的，能做的只有把root磁盘卷拆卸，再装载到另外的EC2实例上，并修改相应的文件。以下便是详细操作：</p><ol><li>关闭当前EC2实例</li><li>将有错误sshd_config的磁盘(EBS)拆卸</li><li>当磁盘重新装载到另一个EC2实例上，并挂载该磁盘<br>拆卸与装载都在AWS的console界面操作，装载成功后，可用以下命令挂载（我的新的磁盘名字是 xdf)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /mnt/other</span><br><span class="line">sudo mount /dev/xvdf /mnt/other</span><br></pre></td></tr></table></figure></li><li>编辑损坏的文件sshd_config，修复配置与语法错误</li><li>反挂载并拆卸掉该磁盘<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /mnt/other</span><br></pre></td></tr></table></figure></li><li>再次将该磁盘装载到原EC2实例上</li><li>启动原EC2实例，测试修改结果</li></ol><p>这些做完之后，一切都如以前一样。又可以通过SSH KEY连上原来的实例。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>教训是，永远别再一次做这种事。在适当的时候，也可以给你的编辑器sudo的权限，vim的配置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnoremap w!! %!sudo tee &gt; /dev/null %</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;常识：&lt;/strong&gt; AWS是没有root用户的，登陆也都是通过SSH KEY完成授权认证。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背景：&lt;/strong&gt; 正在AWS上搭一个&lt;code&gt;CI&lt;/code&gt; (GO)，与&lt;code&gt;gitlab&lt;/code&gt;，为
      
    
    </summary>
    
    
      <category term="linux" scheme="https://owenyang0.github.io/tags/linux/"/>
    
      <category term="aws" scheme="https://owenyang0.github.io/tags/aws/"/>
    
      <category term="ec2" scheme="https://owenyang0.github.io/tags/ec2/"/>
    
      <category term="ssh" scheme="https://owenyang0.github.io/tags/ssh/"/>
    
      <category term="passwd" scheme="https://owenyang0.github.io/tags/passwd/"/>
    
      <category term="amazon-web-services" scheme="https://owenyang0.github.io/tags/amazon-web-services/"/>
    
  </entry>
  
  <entry>
    <title>2014压过的辙痕</title>
    <link href="https://owenyang0.github.io/2015/02/22/2014%E5%8E%8B%E8%BF%87%E7%9A%84%E8%BE%99%E7%97%95/"/>
    <id>https://owenyang0.github.io/2015/02/22/2014压过的辙痕/</id>
    <published>2015-02-22T14:30:55.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>2014过去2个月有余，才回过神来做一下去年的总结。自己的拖延症也是厉害，此时也希望不会太晚。不过，好歹也才刚过春节。<br>一年，从去学校毕业了。<br>一年，从实习到了试用，从新蛋到了TW。<br>一年，大家各奔东西，世界留给了一群追梦的人。<br>一年，又开始了一段新的人生罢。</p><p>现在都记不得最初的梦想了，自己的追逐的意义依旧还是存在的，只是少了当初那份一往无前的勇气。<br>去年<br><img src="/images/goal_2014.png" alt="2014 goal"><br>今年<br><img src="/images/goal_2015.png" alt="2015 goal"><br>去年的整个计划是开始读书，可是真正执行起来才会发现并非想像中的那么容易。当然，也有其他，只是其他还算得上不易。</p><h3 id="1-读书"><a href="#1-读书" class="headerlink" title="1. 读书"></a>1. 读书</h3><p>人人都会，却又不是人人都会的技能。<a href="http://book.douban.com/people/owenyang0/">http://book.douban.com/people/owenyang0/</a><br>我开始学会用豆瓣来Track自己的读书进度，年终还可以用来分析分析自己的读书倾向。不得不说豆瓣在这个方面，做得也还是不错的。给书友提供了一个平台，分享与交流。<br>相比一些个大神，一年上百本书的战果，我这根本不值一提。不过，自己也慢慢开始了自己的读书习惯，与计划。</p><h3 id="2-写博"><a href="#2-写博" class="headerlink" title="2. 写博"></a>2. 写博</h3><p>想写，却又不容易坚持的习惯。<a href="http://www.cnblogs.com/owenyang/">http://www.cnblogs.com/owenyang/</a><br>一直想写一些，或者坚持写一些博客，来记录自己的平凡但不应该平淡的生活。但实际情况，却还是一样：不太容易坚持。一年下来，总共有10篇博文。细看又是那么的不均匀，其中有4篇是在12月所写。原来效率，也不会是平均分布到整年。抓住时间，用每一分秒提高效率。</p><h3 id="3-初心"><a href="#3-初心" class="headerlink" title="3. 初心"></a>3. 初心</h3><p>想忘，又不忘，想而不舍忘。<br>和某人，在某时，去过某些地方。却又在，某时，走向了远方。既然，风筝早已远去，任你在风中如何摇曳，也终究拉不回曾经的时光。风在吹，某在飞，时光无法回流，选择只有向前而走。随心而行，是那么的不靠谱，不行动意味着不作为。有过开心，欢乐，但更多是在失去后所保留的执著。</p><p>去年也成往事，还是今年的计划吧。<br><strong>1.读书：</strong>有人说，一年读50本书，才算得上是读书人。粗算一下，一周就得读一本，想想压力也是挺大的。去年一年的时间，也才20本。第二年，也别过分高估自己。今年30本吧。<br><strong>2.写博：</strong>别去想自己写多少，去想自己有多少可以写吧。保持不断学习的热情，一直学习下去，与分享下去。不只是技术，还有其他。<br><strong>3.初心：</strong>初心？初心是什么？不懂，忘了。只是希望自己的这一年，走得不会太艰难。</p><p>最后一句话，留给自己：心态，别抑郁，要乐观，诚对人，能坚持，追梦想。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2014过去2个月有余，才回过神来做一下去年的总结。自己的拖延症也是厉害，此时也希望不会太晚。不过，好歹也才刚过春节。&lt;br&gt;一年，从去学校毕业了。&lt;br&gt;一年，从实习到了试用，从新蛋到了TW。&lt;br&gt;一年，大家各奔东西，世界留给了一群追梦的人。&lt;br&gt;一年，又开始了一段新
      
    
    </summary>
    
    
      <category term="2014" scheme="https://owenyang0.github.io/tags/2014/"/>
    
      <category term="2015" scheme="https://owenyang0.github.io/tags/2015/"/>
    
      <category term="goal" scheme="https://owenyang0.github.io/tags/goal/"/>
    
      <category term="summary" scheme="https://owenyang0.github.io/tags/summary/"/>
    
      <category term="plan" scheme="https://owenyang0.github.io/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6中字符串的新特性</title>
    <link href="https://owenyang0.github.io/2015/02/12/New-string-features-in-ECMAScript-6/"/>
    <id>https://owenyang0.github.io/2015/02/12/New-string-features-in-ECMAScript-6/</id>
    <published>2015-02-12T20:26:43.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>本文将覆盖在ECMAScript 6 (ES6)中，字符串的新特性。</p><h2 id="Unicode-码位-code-point-转义"><a href="#Unicode-码位-code-point-转义" class="headerlink" title="Unicode 码位(code point)转义"></a>Unicode 码位(code point)转义</h2><p>Unicode字符码位的长度是21位<a href="http://speakingjs.com/es5/ch24.html">[2]</a>。而JavaScript的字符串，是16位的，以UTF-16的方式编码。因此，超出16位码长的码位范围(the Basic Multilingual Pane, BMP, 基本多文种平面)则用两个JavaScript字符表示。直到现在，如果想用数字指定这样的码位，需要两个叫Unicode转义符的东西。以下，则会以相应的码位(0x1F680)打印出一个火箭。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\uD83D\uDE80&#x27;</span>);</span><br></pre></td></tr></table></figure><br>在ECMAScript 6中，有一个新的Unicode转义符，能让你指定任意的码位（不用再管是否是16位）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\u&#123;1F680&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="字符串的插值，多行及原始字符语法"><a href="#字符串的插值，多行及原始字符语法" class="headerlink" title="字符串的插值，多行及原始字符语法"></a>字符串的插值，多行及原始字符语法</h2><p>模板字符串 <a href="http://www.2ality.com/2011/09/quasi-literals.html">[3]</a>提供了3个有意思的特性。<br><strong>1. 模板字符中，支持字符串插值：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = <span class="string">&#x27;Jane&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> last = <span class="string">&#x27;Doe&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>!`</span>);</span><br><span class="line"><span class="comment">// Hello Jane Doe!</span></span><br></pre></td></tr></table></figure><br><strong>2. 模板字符串可以包含多行：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> multiLine = <span class="string">`</span></span><br><span class="line"><span class="string">  This is</span></span><br><span class="line"><span class="string">  a string</span></span><br><span class="line"><span class="string">  with multiple</span></span><br><span class="line"><span class="string">  lines`</span>;</span><br></pre></td></tr></table></figure></p><p><strong>3. 模板字符串可以是原始的：</strong><br>若使用<code>String.raw</code> 作为模板字符串的前缀，则模板字符串可以是<em>原始(raw)</em>的。反斜线也不再是特殊字符，<code>\n</code> 也不会被解释成换行符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> raw = <span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Not a newline: \n`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(raw === <span class="string">&#x27;Not a newline: \\n&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h2 id="字符串迭代那些事"><a href="#字符串迭代那些事" class="headerlink" title="字符串迭代那些事"></a>字符串迭代那些事</h2><p>字符串是可迭代的 <a href="http://www.2ality.com/2013/06/iterators-generators.html">[4]</a>，这就意味着可以使用<code>for-of</code> 去迭代其中的字符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> <span class="string">&#x27;abc&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br></pre></td></tr></table></figure><br>亦可用展开运行符(…) 将字符串转换成数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> chars = [...<span class="string">&#x27;abc&#x27;</span>];</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure></p><h3 id="处理Unicode的码位"><a href="#处理Unicode的码位" class="headerlink" title="处理Unicode的码位"></a>处理Unicode的码位</h3><p>字符串迭代器，会以码位边界将字符串进行划分。这将导致迭代器的返回值，会是一个或两个字符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ch.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>这将会为我提供一个快速而简单的方法，去计算字符串Unicode码位的数量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; [...<span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>].<span class="property">length</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>这同样会在，不包含基本多文种平面(non-BMP)码位的字符串操作中提供方便。如：反转字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5: \uD83D\uDE80 are (incorrectly) reversed</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// &#x27;y\uDE80\uD83Dx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6: order of \uD83D\uDE80 is preserved</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...str].<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// &#x27;y\uD83D\uDE80x&#x27;</span></span><br></pre></td></tr></table></figure><br>这是在firefox控制台中，两个反转之后的结果：<br><img src="/images/firefox_unicode.png" alt="Unicode in Firefox"></p><h3 id="码位中数值"><a href="#码位中数值" class="headerlink" title="码位中数值"></a>码位中数值</h3><p>有一个新的方法 <code>codePointAt()</code> 将返回字符串，给定索引的码位数字值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">codePointAt</span>(<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// 78</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">codePointAt</span>(<span class="number">1</span>).<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// 1f680</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">codePointAt</span>(<span class="number">3</span>).<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// 79</span></span><br></pre></td></tr></table></figure><br>该方法在与字符串迭代操作结合时，也能很好的运行使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ch.<span class="title function_">codePointAt</span>(<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 78</span></span><br><span class="line"><span class="comment">// 1f680</span></span><br><span class="line"><span class="comment">// 79</span></span><br></pre></td></tr></table></figure></p><p>与方法<code>codePointAt()</code>相对的则是<code>String.fromCodePoint()</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="title class_">String</span>.<span class="title function_">fromCodePoint</span>(<span class="number">0x78</span>, <span class="number">0x1f680</span>, <span class="number">0x79</span>) === <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="包含与重要字符串的方法"><a href="#包含与重要字符串的方法" class="headerlink" title="包含与重要字符串的方法"></a>包含与重要字符串的方法</h2><p>有三个方法，可以检查一个字符串是否存在于另一个字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;hell&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;ello&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">includes</span>(<span class="string">&#x27;ell&#x27;</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>每一个方法都有一个可选的，第二个参数。可以指定被搜寻字符串的开始或结束位置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;ello&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;hell&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">includes</span>(<span class="string">&#x27;ell&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">includes</span>(<span class="string">&#x27;ell&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>方法<code>repeat()</code> 则用以重复某个字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&#x27;doo &#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;doo doo doo &#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="所有新方法"><a href="#所有新方法" class="headerlink" title="所有新方法"></a>所有新方法</h2><h3 id="模板字符串："><a href="#模板字符串：" class="headerlink" title="模板字符串："></a>模板字符串：</h3><ul><li>String.raw(callSite, …substitutions) : string<br>用于产生<em>原始(raw)</em>字串(反斜杠不会被转义)。</li></ul><h3 id="Unicode和码位："><a href="#Unicode和码位：" class="headerlink" title="Unicode和码位："></a>Unicode和码位：</h3><ul><li><p>String.fromCodePoint(…codePoints : number[]) : string<br>将数字值码位转换成字符串。</p></li><li><p>String.prototype.codePointAt(pos) : number<br>返回码位开始位置的数字值(会包含一个或两个JavaScript的字符)。</p></li><li><p>String.prototype.normalize(form? : string) : string<br>不同的码位组合，最后可能有一致的显示。<a href="">Unicode normalization</a>可以将它们转化成同样的值，这会被叫做规范的表示方式(canonical representation)。这将有助于比较和查找字符串。在一般的文本之中，’NFC’是一种被推荐的形式。</p></li></ul><h3 id="查找字符串："><a href="#查找字符串：" class="headerlink" title="查找字符串："></a>查找字符串：</h3><ul><li><p>String.prototype.startsWith(searchString, position=0) : boolean<br>检查一个字符串是否以另一个字符串(searchString)开始。位置(position)指定从哪开始执行检查。</p></li><li><p>String.prototype.endsWith(searchString, endPosition=searchString.length) : boolean<br>检查一个字符串是否以另一个字符串(searchString)结尾。结束位置(endPosition)指定在哪执行结尾检查。</p></li><li><p>String.prototype.includes(searchString, position=0) : boolean<br>检查一个字符字符串是否包含另一个字符串(searchString)。位置(position)指定从哪开始检查。</p></li></ul><h3 id="重复字符串："><a href="#重复字符串：" class="headerlink" title="重复字符串："></a>重复字符串：</h3><ul><li>String.prototype.repeat(count) : string<br>返回给定字符串N次。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.2ality.com/2014/08/es6-today.html">Using ECMAScript 6 today</a></li><li>Chapter 24, “<a href="http://speakingjs.com/es5/ch24.html">Unicode and JavaScript</a>” of “Speaking JavaScript”; includes an introduction to Unicode.</li><li><a href="http://www.2ality.com/2011/09/quasi-literals.html">Template strings: embedded DSLs in ECMAScript 6</a></li><li><a href="http://www.2ality.com/2013/06/iterators-generators.html">Iterators and generators in ECMAScript 6</a></li><li>译自 <a href="http://www.2ality.com/2015/01/es6-strings.html">New string features in ECMAScript 6</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将覆盖在ECMAScript 6 (ES6)中，字符串的新特性。&lt;/p&gt;
&lt;h2 id=&quot;Unicode-码位-code-point-转义&quot;&gt;&lt;a href=&quot;#Unicode-码位-code-point-转义&quot; class=&quot;headerlink&quot; title=&quot;Un
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://owenyang0.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="https://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="ECMAScript 6" scheme="https://owenyang0.github.io/tags/ECMAScript-6/"/>
    
      <category term="Template" scheme="https://owenyang0.github.io/tags/Template/"/>
    
      <category term="Template String" scheme="https://owenyang0.github.io/tags/Template-String/"/>
    
  </entry>
  
  <entry>
    <title>NPM install - killed error solution</title>
    <link href="https://owenyang0.github.io/2015/02/09/NPM-install-killed-error-solution/"/>
    <id>https://owenyang0.github.io/2015/02/09/NPM-install-killed-error-solution/</id>
    <published>2015-02-09T19:29:46.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>在接手一个Node项目的时候，<code>npm install</code>。却出现了”killed”的错误。以为是Node版本的问题，熟练地切换了0.11与0.10版，同样无解。<br>由于新的npm版本吧，<code>npm install</code>的时候已经无法看到常规的log信息了。以<code>npm install -d</code>查看安装的过程，发现无任何特殊的地方。在一定程度的时候，直接被”killed”。关于<code>npm install -d</code>可以看 <a href="https://docs.npmjs.com/misc/config">npm config</a><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-v: --version</span><br><span class="line">-h, -?, --help, -H: --usage</span><br><span class="line">-s, --silent: --loglevel silent</span><br><span class="line">-q, --quiet: --loglevel warn</span><br><span class="line">-d: --loglevel info</span><br><span class="line">-dd, --verbose: --loglevel verbose</span><br><span class="line">-ddd: --loglevel silly</span><br><span class="line">-g: --global</span><br><span class="line">-C: --prefix</span><br><span class="line">-l: --long</span><br><span class="line">-m: --message</span><br><span class="line">-p, --porcelain: --parseable</span><br><span class="line">-reg: --registry</span><br><span class="line">-f: --force</span><br><span class="line">-desc: --description</span><br><span class="line">-S: --save</span><br><span class="line">-D: --save-dev</span><br><span class="line">-O: --save-optional</span><br><span class="line">-B: --save-bundle</span><br><span class="line">-E: --save-exact</span><br><span class="line">-y: --yes</span><br><span class="line">-n: --yes false</span><br><span class="line">ll and la commands: ls --long</span><br></pre></td></tr></table></figure></p><p>最后才想到，可能是内存不够了。由于是以vagrant启动的一台ubuntu14.04的虚拟机，默认只有500M的内存。而且该项目会用到一些底层的npm包，会编译一些代码。这就导致了内存不够用。<br>可以查一下相应的系统log，在路径 <code>/var/log</code>之下，确认自己的问题。如<code>/var/log/syslog</code> 和 <code>/var/log/messages</code>等。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="1-增大内存。"><a href="#1-增大内存。" class="headerlink" title="1. 增大内存。"></a>1. 增大内存。</h4><p>由于我是虚拟机，所有增大内存相对简单。在vagrantfile里，只需要增加一条：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">  v.memory = 1024</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>即可。</p><h4 id="2-利用swap-file实现虚拟内存"><a href="#2-利用swap-file实现虚拟内存" class="headerlink" title="2. 利用swap file实现虚拟内存"></a>2. 利用swap file实现虚拟内存</h4><p>使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon -s</span><br></pre></td></tr></table></figure><br>查看系统是否配置了交换区域。没有的话， 便直接开始创建swap file。<br>创建一个1G的文件。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fallocate -l 1G /swapfile</span><br></pre></td></tr></table></figure><br>使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lh /swapfile</span><br></pre></td></tr></table></figure><br>确认是否是自己所需要的文件大小。</p><p><strong>启用Swap文件</strong><br>首先调整文件的权限，若该文件能被其他用户随意的读写，则会产生很大的安全隐患。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure><br>现在安全多了，可以让系统开始设置交换区域了。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure><br>启用该文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure><br>现在基本的步骤已经完成了，可以使用最初的命令验证swap file是否正确使用。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon -s</span><br><span class="line"></span><br><span class="line">Filename                    Type          Size     Used     Priority</span><br><span class="line">/swapfile                               file          1048572     0     -1</span><br></pre></td></tr></table></figure><br>交换分区已经成功设置，系统会在必要的时候使用它。</p><p><strong>注意</strong><br>现在已经启用了swap文件，但当我们重启的时候，系统不会自动地启用该swap文件。可以通过修改<code>fstab</code>文件实现开机使用swap文件。<br>用root权限编辑<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure><br>在文件的最后，需要添加一行告诉操作系统自动使用swap文件。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swapfile   none    swap    sw    0   0</span><br></pre></td></tr></table></figure></p><p>如此再<code>npm install</code> 的时候，便解决了所有的问题了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在接手一个Node项目的时候，&lt;code&gt;npm install&lt;/code&gt;。却出现了”killed”的错误。以为是Node版本的问题，熟练地切换了0.11与0.10版，同样无解。&lt;br&gt;由于新的npm版本吧，&lt;code&gt;npm install&lt;/code&gt;的时候已经无法
      
    
    </summary>
    
    
      <category term="npm" scheme="https://owenyang0.github.io/tags/npm/"/>
    
      <category term="npm install" scheme="https://owenyang0.github.io/tags/npm-install/"/>
    
      <category term="killed" scheme="https://owenyang0.github.io/tags/killed/"/>
    
      <category term="memory" scheme="https://owenyang0.github.io/tags/memory/"/>
    
      <category term="npm install killed" scheme="https://owenyang0.github.io/tags/npm-install-killed/"/>
    
  </entry>
  
  <entry>
    <title>React JS快速开始手册</title>
    <link href="https://owenyang0.github.io/2015/01/17/The-React-Quick-Start-Guide/"/>
    <id>https://owenyang0.github.io/2015/01/17/The-React-Quick-Start-Guide/</id>
    <published>2015-01-17T11:19:11.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>怎样用React JS构建一个用户界面？本文将快速地给你一个React JS的概览。代码，请君移步<a href="https://github.com/owenyang0/react-starter">react-starter</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>React只有很少的API，这使得它很容易去学习与理解。当然，使用它也是相当有意思的。但是，简约却并不简单。在我们开始之前，有一些概念是需要去理解的。</p><h3 id="React元素-React-elements"><a href="#React元素-React-elements" class="headerlink" title="React元素(React elements)"></a>React元素(React elements)</h3><p>React元素是用于呈现HTML结构的JavaScript对象。它们不会存在于浏览器中，只是用于描述浏览器中的元素，比如<code>h1</code>, <code>div</code> 或者 <code>section</code>等等。</p><h3 id="模块-Components"><a href="#模块-Components" class="headerlink" title="模块(Components)"></a>模块(Components)</h3><p>模块是开发者创建的React元素。它们通过比用户界面的范围要大，因为它们同时包含了其结构与功能。想像一下导航栏，点赞按钮，图片上传这些模块的概念。</p><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>JSX是一种用于创建React元素和模块的技术，或者说是规范、语言。比如 <code>&lt;h1&gt;Hello&lt;/h1&gt;</code> 便是一个用JSX所写的React元素。同样的React元素，可以用原生的JavaScript实现，即 <code>React.DOM.h1(null, &#39;Hello&#39;);</code>。相比原生的JavaScript，JSX更加简洁。会让你花更少的精力去读和写代码，在上线的时候将其转换成原生的JavaScript即可。</p><h3 id="虚拟DOM-Virtual-DOM"><a href="#虚拟DOM-Virtual-DOM" class="headerlink" title="虚拟DOM(Virtual DOM)"></a>虚拟DOM(Virtual DOM)</h3><p>虚拟DOM是一个JavaScript的树形结构，包含了React元素和模块。React通过渲染虚拟DOM到浏览器，使得用户界面得以显示。React也会观察虚拟DOM的变化，根据虚拟DOM自动地改变浏览器DOM元素。</p><p>了解了这些概念之后，我们就可以畅快地敲React代码了。这里将会创建一系列的用户界面，每一个界面都将提前添加一层功能层。我们会做一个类似instagram的应用 - 当然，这个很粗糙。</p><h2 id="渲染-Rendering"><a href="#渲染-Rendering" class="headerlink" title="渲染(Rendering)"></a>渲染(Rendering)</h2><p>业务的第一步是渲染一个虚拟的元素(React元素或者模块都可以)。由于每一个虚拟元素都存在于内存之中，所以我们必须显式地告诉React，将其渲染到浏览器的DOM之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;http://owenyang0.github.io/img/background.jpg&#x27;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br></pre></td></tr></table></figure><p><code>render</code> 函数接受两个参数，一个是虚拟元素，一个是真实的DOM节点。React就是获取到虚拟元素之后，将其插入到所给的节点之中。此时，在浏览器中便可以看到照片了。</p><h2 id="模块-Components-1"><a href="#模块-Components-1" class="headerlink" title="模块(Components)"></a>模块(Components)</h2><p>模块是React的核心与灵魂。它们可以自定义React元素。经常由单一的功能或者结构扩展而来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Photo</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;http://owenyang0.github.io/img/background.jpg&#x27;</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Photo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br></pre></td></tr></table></figure><p><code>createClass</code> 函数接受一个对象，该对象实现了<code>render</code> 的函数。<br>这个<code>Photo</code>模块被构建好，<code>&lt;Photo /&gt;</code>，然后渲染到document body中。<br>该模块并没有比上一个React图像元素做更多的事情，但这却更加有利于在功能和结构上进行扩展。</p><h2 id="属性-Props"><a href="#属性-Props" class="headerlink" title="属性(Props)"></a>属性(Props)</h2><p>属性可以认为是模块的一些配置选项。它们以参数(arguments)的形式传递给模块，看起来就像HTML的属性(attributes)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Photo</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;photo&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;this.props.imageURL&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.props.caption&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Photo</span> <span class="attr">imageURL</span>=<span class="string">&#x27;http://owenyang0.github.io/img/background.jpg&#x27;</span> <span class="attr">caption</span>=<span class="string">&#x27;Headset&#x27;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br></pre></td></tr></table></figure><p>在<code>render</code> 函数里面，两个属性(props)传到了<code>Photo</code>模块，<code>imageURL</code> 和 <code>caption</code>。<code>imageURL</code>属性被用作React元素中的<code>src</code>。而<code>caption</code>属性则以纯文本的方式在React中的span元素使用。</p><p>值得一提的是，模块永远不应该去改变属性的的值，它们是不可变的。如果一个模块有一个可变的数据，那应该应用使用状态对象(state object)。</p><h2 id="状态-State"><a href="#状态-State" class="headerlink" title="状态(State)"></a>状态(State)</h2><p>状态对象是一个模块的内部对象。它会持有可变的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Photo</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">toggleLiked</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">liked</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">liked</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getInitialState</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">liked</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> buttonClass = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">liked</span> ? <span class="string">&#x27;active&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;photo&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;this.props.src&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;bar&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleLiked&#125;</span> <span class="attr">className</span>=<span class="string">&#123;buttonClass&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ♥</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.props.caption&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Photo</span> <span class="attr">src</span>=<span class="string">&#x27;http://owenyang0.github.io/img/background.jpg&#x27;</span> <span class="attr">caption</span>=<span class="string">&#x27;Headset&#x27;</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br></pre></td></tr></table></figure><p>在模块中引入状态，会增加一点点的复杂度。</p><p>在这模块中，有一个新的函数<code>getInitialState</code>。当模块初始化的时候，React会调用这个函数。而返回的对象则作为React的初始化状态(看函数名就知道)。<br>还有一个新的函数叫<code>toggleLiked</code>。这个函数调用了模块上的setState方法，可以改变状态<code>liked</code>的值。<br>通过模块的render函数，变量<code>buttonClass</code>被赋值成了’active’或者空，这都依赖于<code>liked</code>状态。<br><code>buttonClass</code>是React按钮元素的class名字。按钮还拥有一个<code>onClick</code>的事件回调，指向<code>toggleLiked</code>函数。</p><p>当模块渲染成浏览器DOM的时候，究竟发生全过程：</p><ul><li>当按钮点击被触发时，调用了<code>toggleLiked</code></li><li><code>liked</code>的状态被改变</li><li>React将模块再次渲染成虚拟DOM</li><li>新的虚拟DOM与旧的虚拟DOM相比较</li><li>React将改变的部分隔离，然后更新到浏览器DOM</li></ul><p>在这个场景中，React会改变button上的类名。</p><h2 id="组合-Composition"><a href="#组合-Composition" class="headerlink" title="组合(Composition)"></a>组合(Composition)</h2><p>组合的意思是说，将小的分散的模块组成一个大的整体。比如<code>Photo</code>模块可以在<code>PhotoGallery</code>中使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Photo</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">toggleLiked</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">liked</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">liked</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getInitialState</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">liked</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> buttonClass = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">liked</span> ? <span class="string">&#x27;active&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;photo&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;this.props.src&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;bar&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleLiked&#125;</span> <span class="attr">className</span>=<span class="string">&#123;buttonClass&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ♥</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.props.caption&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">PhotoGallery</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">getDataFromServer</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://owenyang0.github.io/img/background.jpg&#x27;</span>,</span><br><span class="line">      <span class="attr">caption</span>: <span class="string">&#x27;Headset&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://owenyang0.github.io/images/mocha.png&#x27;</span>,</span><br><span class="line">      <span class="attr">caption</span>: <span class="string">&#x27;Mocha&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://owenyang0.github.io/images/catalog.png&#x27;</span>,</span><br><span class="line">      <span class="attr">caption</span>: <span class="string">&#x27;Catelog&#x27;</span></span><br><span class="line">    &#125;];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="title function_">getDataFromServer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> photos = data.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">photo</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Photo</span> <span class="attr">src</span>=<span class="string">&#123;photo.url&#125;</span> <span class="attr">caption</span>=<span class="string">&#123;photo.caption&#125;</span> /&gt;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;photo-gallery&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;photos&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">PhotoGallery</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br></pre></td></tr></table></figure></p><p>这个<code>Photo</code>模块完完全全和上面的一样。但新的<code>PhotoGallery</code>模块会生成<code>Photo</code>模块。该场景中，伪造了返回包含三个对象的数组的数据，每一个对象都返回一个url和其标题。通过循环，生成了三个<code>Photo</code>的模块，将最终的返回值插入到<code>render</code>函数之中。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>用React来构建你的用户界面，我想这也差不多了。React的文档手册，包含了所有的细节。强烈推荐大家去读一下。<br>同样的，该文也没有涉及你本地环境安装的细节。<a href="http://facebook.github.io/react/docs/getting-started.html">文档</a>都会有的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;怎样用React JS构建一个用户界面？本文将快速地给你一个React JS的概览。代码，请君移步&lt;a href=&quot;https://github.com/owenyang0/react-starter&quot;&gt;react-starter&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="React" scheme="https://owenyang0.github.io/tags/React/"/>
    
      <category term="ReactJS" scheme="https://owenyang0.github.io/tags/ReactJS/"/>
    
      <category term="JS" scheme="https://owenyang0.github.io/tags/JS/"/>
    
      <category term="Facebook" scheme="https://owenyang0.github.io/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6中的数组操作方法</title>
    <link href="https://owenyang0.github.io/2015/01/04/ECMAScript-6%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>https://owenyang0.github.io/2015/01/04/ECMAScript-6中的数组操作方法/</id>
    <published>2015-01-04T22:20:25.000Z</published>
    <updated>2024-02-02T04:46:03.896Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍ECMAScript 6即将带给我们新的数组操作方法，以及在怎样在现有浏览器应用这些新的数组特性。</p><p><strong>Note:</strong> 我将使用交替使用构造器(constructor)和类(class)两个术语。</p><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>数组(Array)自身所拥有的方法。</p><h3 id="Array-from-arrayLike-mapFunc-thisArg"><a href="#Array-from-arrayLike-mapFunc-thisArg" class="headerlink" title="Array.from(arrayLike, mapFunc?, thisArg?)"></a>Array.from(arrayLike, mapFunc?, thisArg?)</h3><p><code>Array.from()</code>的基本功能是，转换两种类型的对象成数组。</p><blockquote><p><strong>类数组对象(Array-like objects)</strong></p></blockquote><p>该类对象有长度与索引的属性。DOM操作符的结果即属于该类，如<code>document.getElementsByClassName()</code>。</p><blockquote><p><strong>可迭代对象(Iterable objects)</strong></p></blockquote><p>这类对象在取值时，每次只能取一个元素。数组是可迭代的，就如ECMAScript中新的数组结构，映射(Map)和集(Set)。</p><p>以下代码是一个转换类数组对象到数组的一个示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;ul.fancy li&#x27;</span>);</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(lis).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">li</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>querySelectorAll()</code>的结果不是一个数组，也不会有<code>forEach()</code>这个方法。这是我们需要在使用这个方法之前，将它转换成数组的原因。</p><p><strong>通过Array.from()使用Mapping</strong><br><code>Array.from()</code>同样也是一个泛型使用<code>map()</code>的替代选择。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> spans = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;span.name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map(), generically:</span></span><br><span class="line"><span class="keyword">let</span> names1 = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>.<span class="title function_">call</span>(spans, <span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">textContent</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.from():</span></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(spans, <span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">textContent</span>);</span><br></pre></td></tr></table></figure><p>两个方法中的第二个参数，都是箭头函数(arrow function)。<br>在这个示例中，<code>document.querySelectorAll()</code>的结果又是一个类数组对象，而非数组。这就是我们不能直接调用<code>map()</code>的原因。第一个示例中，为了使用<code>forEach()</code>，我们将类数组对象转换成了数组。这里我们通过泛型方法和两个参数版本的<code>Array.from()</code>，而省去了中间步骤。</p><p><strong>Holes</strong><br><code>Array.from()</code>会忽略数组里缺失的元素 - 洞(holes)，它会以未定义的元素(undefined elements)进行对待。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">0</span>,,<span class="number">2</span>])</span><br><span class="line">[ <span class="number">0</span>, <span class="literal">undefined</span>, <span class="number">2</span> ]</span><br></pre></td></tr></table></figure><p>这就意味着，你可以使用<code>Array.from()</code>来创建或者填充一个数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>), <span class="function">() =&gt;</span> <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">[ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span> ]</span><br><span class="line">&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>), <span class="function">(<span class="params">x,i</span>) =&gt;</span> i)</span><br><span class="line">[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br></pre></td></tr></table></figure><p>如果你想用一个固定的值去填充一个数组，那么<code>Array.prototype.fill()</code>(请看下文)将是一个更好的选择。第一个即是以上示例的两种方式。</p><p><strong>在数组(Array)子类中的from()</strong><br>另一个<code>Array.from()</code>的使用场景是，转换类数组对象或可迭代对象到一个数组(Array)子类的一个实例。如你创建了一个Array的子类MyArray，想将此类对象转化成MyArray的一个实例，你就可以简单地使用<code>MyArray.from()</code>。可以这样使用的原因是，在ECMAScript 6中构造器(constructors)会继承下去(父类构造器是它子类构造器的原型(prototype))。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> instanceOfMyArray = <span class="title class_">MyArray</span>.<span class="title function_">from</span>(anIterable);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你可以将该功能与映射(mapping)结合起来，在一个你控制结果构造器的地方完成映射操作(map operation)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from() – determine the result’s constructor via the receiver</span></span><br><span class="line"><span class="comment">// (in this case, MyArray)</span></span><br><span class="line"><span class="keyword">let</span> instanceOfMyArray = <span class="title class_">MyArray</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map(): the result is always an instance of Array</span></span><br><span class="line"><span class="keyword">let</span> instanceOfArray   = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure><h3 id="Array-of-…items"><a href="#Array-of-…items" class="headerlink" title="Array.of(…items)"></a>Array.of(…items)</h3><p>如果你想将一组值转换成一个数组，你应该使用数组源文本(array literal)。特别是只有一个值且还是数字的时候，数组的构造器便罢工了。更多<a href="http://speakingjs.com/es5/ch18.html#array_constructor">信息</a>请参考。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>)</span><br><span class="line">[ <span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span> ]</span><br><span class="line">&gt; <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>)</span><br><span class="line">[ , ,  ,]</span><br><span class="line">&gt; <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3.1</span>)</span><br><span class="line"><span class="title class_">RangeError</span>: <span class="title class_">Invalid</span> array length</span><br></pre></td></tr></table></figure><p>便如果要将一组值转换成数字子构造器(sub-constructor)的一个实例，我们应该怎么做呢？这就是<code>Array.of()</code>存在的价值(记住，数组子构造器会继承所有的数组方法，当然也包括<code>of()</code>)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyArray</span>.<span class="title function_">of</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="keyword">instanceof</span> <span class="title class_">MyArray</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyArray</span>.<span class="title function_">of</span>(<span class="number">3</span>).<span class="property">length</span> === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把值包裹嵌套在数组里，<code>Array.of()</code>会相当方便，而不会有<code>Array()</code>一样怪异的处理方式。但也要注意<code>Array.prototype.map()</code>，此处有坑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">map</span>(<span class="title class_">Array</span>.<span class="property">of</span>)</span><br><span class="line">[ [ <span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>, [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> ] ],</span><br><span class="line">[ <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> ] ] ]</span><br><span class="line">&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">of</span>(x)) <span class="comment">// better</span></span><br><span class="line">[ [ <span class="string">&#x27;a&#x27;</span> ], [ <span class="string">&#x27;b&#x27;</span> ] ]</span><br><span class="line">&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x]) <span class="comment">// best (in this case)</span></span><br><span class="line">[ [ <span class="string">&#x27;a&#x27;</span> ], [ <span class="string">&#x27;b&#x27;</span> ] ]</span><br></pre></td></tr></table></figure><p>如你所看，<code>map()</code>会传递三个参数到它的回调里面。最后两个又是经常被忽略的(<a href="http://speakingjs.com/es5/ch15.html#_pitfall_unexpected_optional_parameters">详细</a>)。</p><h2 id="原型方法-Prototype-methods"><a href="#原型方法-Prototype-methods" class="headerlink" title="原型方法(Prototype methods)"></a>原型方法(Prototype methods)</h2><p>数组的实例会有很多新的方法可用。</p><h3 id="数组里的迭代-Iterating-over-arrays"><a href="#数组里的迭代-Iterating-over-arrays" class="headerlink" title="数组里的迭代(Iterating over arrays)"></a>数组里的迭代(Iterating over arrays)</h3><p>以下的方法，会帮助完成在数组里的迭代：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">entries</span>()</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">keys</span>()</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">values</span>()</span><br></pre></td></tr></table></figure><p>以上的每一个方法都会返回一串值，却不会作为一个数组返回。它们会通过迭代器，一个接一个的显示。让我们看一个示例(我将使用<code>Array.from()将迭代器的内容放在数组中</code>)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>([ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> ].<span class="title function_">keys</span>())</span><br><span class="line">[ <span class="number">0</span>, <span class="number">1</span> ]</span><br><span class="line">&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>([ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> ].<span class="title function_">values</span>())</span><br><span class="line">[ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> ]</span><br><span class="line">&gt; <span class="title class_">Array</span>.<span class="title function_">from</span>([ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> ].<span class="title function_">entries</span>())</span><br><span class="line">[ [ <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span> ],</span><br><span class="line">[ <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> ] ]</span><br></pre></td></tr></table></figure><p>你可以结合<code>entries()</code>和ECMAScript 6中的<code>for-of</code>循环，方便地将迭代对象拆解成key-value对：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> 这段代码已经可以在最新的Firefox浏览器里运行了。t Firefox.</p><h3 id="查找数组元素"><a href="#查找数组元素" class="headerlink" title="查找数组元素"></a>查找数组元素</h3><p><code>Array.prototype.find(predicate, thisArg?)</code> 会返回满足回调函数的第一个元素。如果没有任何一个元素满足条件，它会返回<code>undefined</code>。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="number">6</span>, -<span class="number">5</span>, <span class="number">8</span>].<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">0</span>)</span><br><span class="line">-<span class="number">5</span></span><br><span class="line">&gt; [<span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>].<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">0</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Array.prototype.findIndex(predicate, thisArg?)</code><br>会返回满足回调函数的第一个元素的索引。如果找不任何满足的元素，则返回-1。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="number">6</span>, -<span class="number">5</span>, <span class="number">8</span>].<span class="title function_">findIndex</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">0</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt; [<span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>].<span class="title function_">findIndex</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">0</span>)</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个find*方法都会忽略洞(holes)，即不会关注undefined的元素。回调的完成函数签名是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">predicate</span>(element, index, array)</span><br></pre></td></tr></table></figure><p><strong>通过findIndex()找NaN</strong></p><p><code>Array.prototype.indexOf()</code>有一个大家所熟知的限制，那就是不能查找NaN。因为它用恒等(===)查找匹配元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="title class_">NaN</span>].<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>)</span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用<code>findIndex()</code>，你就可以使用<code>Object.is()</code>，这就不会产生这样的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="title class_">NaN</span>].<span class="title function_">findIndex</span>(<span class="function"><span class="params">y</span> =&gt;</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, y))</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你同样也可以采用更通用的方式，创建一个帮助函数<code>elemIs()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">function</span> <span class="title function_">elemIs</span>(<span class="params">x</span>) &#123; <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property">is</span>.<span class="title function_">bind</span>(<span class="title class_">Object</span>, x) &#125;</span><br><span class="line">&gt; [<span class="title class_">NaN</span>].<span class="title function_">findIndex</span>(<span class="title function_">elemIs</span>(<span class="title class_">NaN</span>))</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Array-prototype-fill-value-start-end"><a href="#Array-prototype-fill-value-start-end" class="headerlink" title="Array.prototype.fill(value, start?, end?)"></a>Array.prototype.fill(value, start?, end?)</h3><p>用所给的数值，填充一个数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="number">7</span>)</span><br><span class="line">[ <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>洞(Holes)也不会有任何的特殊对待：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="number">7</span>)</span><br><span class="line">[ <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span> ]</span><br></pre></td></tr></table></figure><p>你也可以限制你填充的起始与结束：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].<span class="title function_">fill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">[ <span class="string">&#x27;a&#x27;</span>, <span class="number">7</span>, <span class="string">&#x27;c&#x27;</span> ]</span><br></pre></td></tr></table></figure><h2 id="什么时候可以使用新的数组方法？"><a href="#什么时候可以使用新的数组方法？" class="headerlink" title="什么时候可以使用新的数组方法？"></a>什么时候可以使用新的数组方法？</h2><p>有一些方法已经可以在浏览器里使用了。通过，你可以通过kangax查看兼容性<a href="http://kangax.github.io/compat-table/es6/">ECMAScript 6 compatibility table</a>。</p><p>Paul Miller的 <a href="https://github.com/paulmillr/es6-shim">es6-shim</a>库可以将ES6转换成ES5。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.2ality.com/2014/05/es6-array-methods.html">http://www.2ality.com/2014/05/es6-array-methods.html</a></li><li><a href="http://speakingjs.com/es5/ch18.html#array_holes">Holes in Arrays</a> (Speaking JavaScript)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍ECMAScript 6即将带给我们新的数组操作方法，以及在怎样在现有浏览器应用这些新的数组特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 我将使用交替使用构造器(constructor)和类(class)两个术语。&lt;/p&gt;
&lt;h2 id=&quot;类方
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://owenyang0.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="https://owenyang0.github.io/tags/JavaScript/"/>
    
      <category term="ECMAScript 6" scheme="https://owenyang0.github.io/tags/ECMAScript-6/"/>
    
      <category term="Array" scheme="https://owenyang0.github.io/tags/Array/"/>
    
  </entry>
  
</feed>
